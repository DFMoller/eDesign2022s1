
UART_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003804  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08003998  08003998  00013998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039d4  080039d4  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  080039d4  080039d4  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080039d4  080039d4  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039d4  080039d4  000139d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039d8  080039d8  000139d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080039dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  2000001c  080039f8  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  080039f8  000200c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bb54  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000188b  00000000  00000000  0002bba0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000758  00000000  00000000  0002d430  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006c0  00000000  00000000  0002db88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001f78f  00000000  00000000  0002e248  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000086ff  00000000  00000000  0004d9d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000bf279  00000000  00000000  000560d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011534f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ca0  00000000  00000000  001153cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000001c 	.word	0x2000001c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003980 	.word	0x08003980

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000020 	.word	0x20000020
 80001d0:	08003980 	.word	0x08003980

080001d4 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 0 */
uint8_t myTxData[13] = "@,21593698,!\n";
uint8_t myRxData[1];
uint8_t echo_flag = 0;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
	echo_flag = 1;
 80001dc:	4b04      	ldr	r3, [pc, #16]	; (80001f0 <HAL_UART_RxCpltCallback+0x1c>)
 80001de:	2201      	movs	r2, #1
 80001e0:	701a      	strb	r2, [r3, #0]
}
 80001e2:	bf00      	nop
 80001e4:	370c      	adds	r7, #12
 80001e6:	46bd      	mov	sp, r7
 80001e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ec:	4770      	bx	lr
 80001ee:	bf00      	nop
 80001f0:	20000038 	.word	0x20000038

080001f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001f8:	f000 fa18 	bl	800062c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001fc:	f000 f838 	bl	8000270 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000200:	f000 f8c4 	bl	800038c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000204:	f000 f892 	bl	800032c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart2, myTxData, 13, 10);
 8000208:	230a      	movs	r3, #10
 800020a:	220d      	movs	r2, #13
 800020c:	4913      	ldr	r1, [pc, #76]	; (800025c <main+0x68>)
 800020e:	4814      	ldr	r0, [pc, #80]	; (8000260 <main+0x6c>)
 8000210:	f002 f96e 	bl	80024f0 <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart2, myRxData, 1);
 8000214:	2201      	movs	r2, #1
 8000216:	4913      	ldr	r1, [pc, #76]	; (8000264 <main+0x70>)
 8000218:	4811      	ldr	r0, [pc, #68]	; (8000260 <main+0x6c>)
 800021a:	f002 f9fd 	bl	8002618 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(echo_flag)
 800021e:	4b12      	ldr	r3, [pc, #72]	; (8000268 <main+0x74>)
 8000220:	781b      	ldrb	r3, [r3, #0]
 8000222:	2b00      	cmp	r3, #0
 8000224:	d0fb      	beq.n	800021e <main+0x2a>
	  {
		HAL_UART_Transmit(&huart2, myRxData, 1, 10);
 8000226:	230a      	movs	r3, #10
 8000228:	2201      	movs	r2, #1
 800022a:	490e      	ldr	r1, [pc, #56]	; (8000264 <main+0x70>)
 800022c:	480c      	ldr	r0, [pc, #48]	; (8000260 <main+0x6c>)
 800022e:	f002 f95f 	bl	80024f0 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)"\n", 1, 10);
 8000232:	230a      	movs	r3, #10
 8000234:	2201      	movs	r2, #1
 8000236:	490d      	ldr	r1, [pc, #52]	; (800026c <main+0x78>)
 8000238:	4809      	ldr	r0, [pc, #36]	; (8000260 <main+0x6c>)
 800023a:	f002 f959 	bl	80024f0 <HAL_UART_Transmit>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800023e:	2120      	movs	r1, #32
 8000240:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000244:	f000 fd82 	bl	8000d4c <HAL_GPIO_TogglePin>
		HAL_UART_Receive_IT(&huart2, myRxData, 1);
 8000248:	2201      	movs	r2, #1
 800024a:	4906      	ldr	r1, [pc, #24]	; (8000264 <main+0x70>)
 800024c:	4804      	ldr	r0, [pc, #16]	; (8000260 <main+0x6c>)
 800024e:	f002 f9e3 	bl	8002618 <HAL_UART_Receive_IT>
		echo_flag = 0;
 8000252:	4b05      	ldr	r3, [pc, #20]	; (8000268 <main+0x74>)
 8000254:	2200      	movs	r2, #0
 8000256:	701a      	strb	r2, [r3, #0]
	  if(echo_flag)
 8000258:	e7e1      	b.n	800021e <main+0x2a>
 800025a:	bf00      	nop
 800025c:	20000000 	.word	0x20000000
 8000260:	20000040 	.word	0x20000040
 8000264:	2000003c 	.word	0x2000003c
 8000268:	20000038 	.word	0x20000038
 800026c:	08003998 	.word	0x08003998

08000270 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b0a6      	sub	sp, #152	; 0x98
 8000274:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000276:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800027a:	2228      	movs	r2, #40	; 0x28
 800027c:	2100      	movs	r1, #0
 800027e:	4618      	mov	r0, r3
 8000280:	f003 fb76 	bl	8003970 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000284:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000288:	2200      	movs	r2, #0
 800028a:	601a      	str	r2, [r3, #0]
 800028c:	605a      	str	r2, [r3, #4]
 800028e:	609a      	str	r2, [r3, #8]
 8000290:	60da      	str	r2, [r3, #12]
 8000292:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000294:	1d3b      	adds	r3, r7, #4
 8000296:	2258      	movs	r2, #88	; 0x58
 8000298:	2100      	movs	r1, #0
 800029a:	4618      	mov	r0, r3
 800029c:	f003 fb68 	bl	8003970 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002a0:	2302      	movs	r3, #2
 80002a2:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002a4:	2301      	movs	r3, #1
 80002a6:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002a8:	2310      	movs	r3, #16
 80002aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ae:	2302      	movs	r3, #2
 80002b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80002b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002bc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002c4:	2300      	movs	r3, #0
 80002c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ca:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80002ce:	4618      	mov	r0, r3
 80002d0:	f000 fd56 	bl	8000d80 <HAL_RCC_OscConfig>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d001      	beq.n	80002de <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002da:	f000 f8bd 	bl	8000458 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002de:	230f      	movs	r3, #15
 80002e0:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002e2:	2302      	movs	r3, #2
 80002e4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002e6:	2300      	movs	r3, #0
 80002e8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002ee:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002f0:	2300      	movs	r3, #0
 80002f2:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002f4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80002f8:	2102      	movs	r1, #2
 80002fa:	4618      	mov	r0, r3
 80002fc:	f001 fc56 	bl	8001bac <HAL_RCC_ClockConfig>
 8000300:	4603      	mov	r3, r0
 8000302:	2b00      	cmp	r3, #0
 8000304:	d001      	beq.n	800030a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000306:	f000 f8a7 	bl	8000458 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800030a:	2302      	movs	r3, #2
 800030c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800030e:	2300      	movs	r3, #0
 8000310:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000312:	1d3b      	adds	r3, r7, #4
 8000314:	4618      	mov	r0, r3
 8000316:	f001 fe7f 	bl	8002018 <HAL_RCCEx_PeriphCLKConfig>
 800031a:	4603      	mov	r3, r0
 800031c:	2b00      	cmp	r3, #0
 800031e:	d001      	beq.n	8000324 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000320:	f000 f89a 	bl	8000458 <Error_Handler>
  }
}
 8000324:	bf00      	nop
 8000326:	3798      	adds	r7, #152	; 0x98
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}

0800032c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000330:	4b14      	ldr	r3, [pc, #80]	; (8000384 <MX_USART2_UART_Init+0x58>)
 8000332:	4a15      	ldr	r2, [pc, #84]	; (8000388 <MX_USART2_UART_Init+0x5c>)
 8000334:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000336:	4b13      	ldr	r3, [pc, #76]	; (8000384 <MX_USART2_UART_Init+0x58>)
 8000338:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800033c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800033e:	4b11      	ldr	r3, [pc, #68]	; (8000384 <MX_USART2_UART_Init+0x58>)
 8000340:	2200      	movs	r2, #0
 8000342:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000344:	4b0f      	ldr	r3, [pc, #60]	; (8000384 <MX_USART2_UART_Init+0x58>)
 8000346:	2200      	movs	r2, #0
 8000348:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800034a:	4b0e      	ldr	r3, [pc, #56]	; (8000384 <MX_USART2_UART_Init+0x58>)
 800034c:	2200      	movs	r2, #0
 800034e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000350:	4b0c      	ldr	r3, [pc, #48]	; (8000384 <MX_USART2_UART_Init+0x58>)
 8000352:	220c      	movs	r2, #12
 8000354:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000356:	4b0b      	ldr	r3, [pc, #44]	; (8000384 <MX_USART2_UART_Init+0x58>)
 8000358:	2200      	movs	r2, #0
 800035a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800035c:	4b09      	ldr	r3, [pc, #36]	; (8000384 <MX_USART2_UART_Init+0x58>)
 800035e:	2200      	movs	r2, #0
 8000360:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000362:	4b08      	ldr	r3, [pc, #32]	; (8000384 <MX_USART2_UART_Init+0x58>)
 8000364:	2200      	movs	r2, #0
 8000366:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000368:	4b06      	ldr	r3, [pc, #24]	; (8000384 <MX_USART2_UART_Init+0x58>)
 800036a:	2200      	movs	r2, #0
 800036c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800036e:	4805      	ldr	r0, [pc, #20]	; (8000384 <MX_USART2_UART_Init+0x58>)
 8000370:	f002 f870 	bl	8002454 <HAL_UART_Init>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d001      	beq.n	800037e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800037a:	f000 f86d 	bl	8000458 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800037e:	bf00      	nop
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	20000040 	.word	0x20000040
 8000388:	40004400 	.word	0x40004400

0800038c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b08a      	sub	sp, #40	; 0x28
 8000390:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000392:	f107 0314 	add.w	r3, r7, #20
 8000396:	2200      	movs	r2, #0
 8000398:	601a      	str	r2, [r3, #0]
 800039a:	605a      	str	r2, [r3, #4]
 800039c:	609a      	str	r2, [r3, #8]
 800039e:	60da      	str	r2, [r3, #12]
 80003a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003a2:	4b2b      	ldr	r3, [pc, #172]	; (8000450 <MX_GPIO_Init+0xc4>)
 80003a4:	695b      	ldr	r3, [r3, #20]
 80003a6:	4a2a      	ldr	r2, [pc, #168]	; (8000450 <MX_GPIO_Init+0xc4>)
 80003a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80003ac:	6153      	str	r3, [r2, #20]
 80003ae:	4b28      	ldr	r3, [pc, #160]	; (8000450 <MX_GPIO_Init+0xc4>)
 80003b0:	695b      	ldr	r3, [r3, #20]
 80003b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80003b6:	613b      	str	r3, [r7, #16]
 80003b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003ba:	4b25      	ldr	r3, [pc, #148]	; (8000450 <MX_GPIO_Init+0xc4>)
 80003bc:	695b      	ldr	r3, [r3, #20]
 80003be:	4a24      	ldr	r2, [pc, #144]	; (8000450 <MX_GPIO_Init+0xc4>)
 80003c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80003c4:	6153      	str	r3, [r2, #20]
 80003c6:	4b22      	ldr	r3, [pc, #136]	; (8000450 <MX_GPIO_Init+0xc4>)
 80003c8:	695b      	ldr	r3, [r3, #20]
 80003ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80003ce:	60fb      	str	r3, [r7, #12]
 80003d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003d2:	4b1f      	ldr	r3, [pc, #124]	; (8000450 <MX_GPIO_Init+0xc4>)
 80003d4:	695b      	ldr	r3, [r3, #20]
 80003d6:	4a1e      	ldr	r2, [pc, #120]	; (8000450 <MX_GPIO_Init+0xc4>)
 80003d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003dc:	6153      	str	r3, [r2, #20]
 80003de:	4b1c      	ldr	r3, [pc, #112]	; (8000450 <MX_GPIO_Init+0xc4>)
 80003e0:	695b      	ldr	r3, [r3, #20]
 80003e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003e6:	60bb      	str	r3, [r7, #8]
 80003e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003ea:	4b19      	ldr	r3, [pc, #100]	; (8000450 <MX_GPIO_Init+0xc4>)
 80003ec:	695b      	ldr	r3, [r3, #20]
 80003ee:	4a18      	ldr	r2, [pc, #96]	; (8000450 <MX_GPIO_Init+0xc4>)
 80003f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80003f4:	6153      	str	r3, [r2, #20]
 80003f6:	4b16      	ldr	r3, [pc, #88]	; (8000450 <MX_GPIO_Init+0xc4>)
 80003f8:	695b      	ldr	r3, [r3, #20]
 80003fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80003fe:	607b      	str	r3, [r7, #4]
 8000400:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000402:	2200      	movs	r2, #0
 8000404:	2120      	movs	r1, #32
 8000406:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800040a:	f000 fc87 	bl	8000d1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800040e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000412:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000414:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000418:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800041a:	2300      	movs	r3, #0
 800041c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800041e:	f107 0314 	add.w	r3, r7, #20
 8000422:	4619      	mov	r1, r3
 8000424:	480b      	ldr	r0, [pc, #44]	; (8000454 <MX_GPIO_Init+0xc8>)
 8000426:	f000 faef 	bl	8000a08 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800042a:	2320      	movs	r3, #32
 800042c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800042e:	2301      	movs	r3, #1
 8000430:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000432:	2300      	movs	r3, #0
 8000434:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000436:	2300      	movs	r3, #0
 8000438:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800043a:	f107 0314 	add.w	r3, r7, #20
 800043e:	4619      	mov	r1, r3
 8000440:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000444:	f000 fae0 	bl	8000a08 <HAL_GPIO_Init>

}
 8000448:	bf00      	nop
 800044a:	3728      	adds	r7, #40	; 0x28
 800044c:	46bd      	mov	sp, r7
 800044e:	bd80      	pop	{r7, pc}
 8000450:	40021000 	.word	0x40021000
 8000454:	48000800 	.word	0x48000800

08000458 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800045c:	bf00      	nop
 800045e:	46bd      	mov	sp, r7
 8000460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000464:	4770      	bx	lr
	...

08000468 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800046e:	4b0f      	ldr	r3, [pc, #60]	; (80004ac <HAL_MspInit+0x44>)
 8000470:	699b      	ldr	r3, [r3, #24]
 8000472:	4a0e      	ldr	r2, [pc, #56]	; (80004ac <HAL_MspInit+0x44>)
 8000474:	f043 0301 	orr.w	r3, r3, #1
 8000478:	6193      	str	r3, [r2, #24]
 800047a:	4b0c      	ldr	r3, [pc, #48]	; (80004ac <HAL_MspInit+0x44>)
 800047c:	699b      	ldr	r3, [r3, #24]
 800047e:	f003 0301 	and.w	r3, r3, #1
 8000482:	607b      	str	r3, [r7, #4]
 8000484:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000486:	4b09      	ldr	r3, [pc, #36]	; (80004ac <HAL_MspInit+0x44>)
 8000488:	69db      	ldr	r3, [r3, #28]
 800048a:	4a08      	ldr	r2, [pc, #32]	; (80004ac <HAL_MspInit+0x44>)
 800048c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000490:	61d3      	str	r3, [r2, #28]
 8000492:	4b06      	ldr	r3, [pc, #24]	; (80004ac <HAL_MspInit+0x44>)
 8000494:	69db      	ldr	r3, [r3, #28]
 8000496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800049a:	603b      	str	r3, [r7, #0]
 800049c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800049e:	2007      	movs	r0, #7
 80004a0:	f000 f9fa 	bl	8000898 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004a4:	bf00      	nop
 80004a6:	3708      	adds	r7, #8
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	40021000 	.word	0x40021000

080004b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b08a      	sub	sp, #40	; 0x28
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b8:	f107 0314 	add.w	r3, r7, #20
 80004bc:	2200      	movs	r2, #0
 80004be:	601a      	str	r2, [r3, #0]
 80004c0:	605a      	str	r2, [r3, #4]
 80004c2:	609a      	str	r2, [r3, #8]
 80004c4:	60da      	str	r2, [r3, #12]
 80004c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	4a1b      	ldr	r2, [pc, #108]	; (800053c <HAL_UART_MspInit+0x8c>)
 80004ce:	4293      	cmp	r3, r2
 80004d0:	d130      	bne.n	8000534 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80004d2:	4b1b      	ldr	r3, [pc, #108]	; (8000540 <HAL_UART_MspInit+0x90>)
 80004d4:	69db      	ldr	r3, [r3, #28]
 80004d6:	4a1a      	ldr	r2, [pc, #104]	; (8000540 <HAL_UART_MspInit+0x90>)
 80004d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004dc:	61d3      	str	r3, [r2, #28]
 80004de:	4b18      	ldr	r3, [pc, #96]	; (8000540 <HAL_UART_MspInit+0x90>)
 80004e0:	69db      	ldr	r3, [r3, #28]
 80004e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004e6:	613b      	str	r3, [r7, #16]
 80004e8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ea:	4b15      	ldr	r3, [pc, #84]	; (8000540 <HAL_UART_MspInit+0x90>)
 80004ec:	695b      	ldr	r3, [r3, #20]
 80004ee:	4a14      	ldr	r2, [pc, #80]	; (8000540 <HAL_UART_MspInit+0x90>)
 80004f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004f4:	6153      	str	r3, [r2, #20]
 80004f6:	4b12      	ldr	r3, [pc, #72]	; (8000540 <HAL_UART_MspInit+0x90>)
 80004f8:	695b      	ldr	r3, [r3, #20]
 80004fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004fe:	60fb      	str	r3, [r7, #12]
 8000500:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000502:	230c      	movs	r3, #12
 8000504:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000506:	2302      	movs	r3, #2
 8000508:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050a:	2300      	movs	r3, #0
 800050c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800050e:	2300      	movs	r3, #0
 8000510:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000512:	2307      	movs	r3, #7
 8000514:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000516:	f107 0314 	add.w	r3, r7, #20
 800051a:	4619      	mov	r1, r3
 800051c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000520:	f000 fa72 	bl	8000a08 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000524:	2200      	movs	r2, #0
 8000526:	2100      	movs	r1, #0
 8000528:	2026      	movs	r0, #38	; 0x26
 800052a:	f000 f9c0 	bl	80008ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800052e:	2026      	movs	r0, #38	; 0x26
 8000530:	f000 f9d9 	bl	80008e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000534:	bf00      	nop
 8000536:	3728      	adds	r7, #40	; 0x28
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}
 800053c:	40004400 	.word	0x40004400
 8000540:	40021000 	.word	0x40021000

08000544 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000548:	bf00      	nop
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr

08000552 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000552:	b480      	push	{r7}
 8000554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000556:	e7fe      	b.n	8000556 <HardFault_Handler+0x4>

08000558 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800055c:	e7fe      	b.n	800055c <MemManage_Handler+0x4>

0800055e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800055e:	b480      	push	{r7}
 8000560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000562:	e7fe      	b.n	8000562 <BusFault_Handler+0x4>

08000564 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000568:	e7fe      	b.n	8000568 <UsageFault_Handler+0x4>

0800056a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800056a:	b480      	push	{r7}
 800056c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800056e:	bf00      	nop
 8000570:	46bd      	mov	sp, r7
 8000572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000576:	4770      	bx	lr

08000578 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800057c:	bf00      	nop
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr

08000586 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000586:	b480      	push	{r7}
 8000588:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800058a:	bf00      	nop
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr

08000594 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000598:	f000 f88e 	bl	80006b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800059c:	bf00      	nop
 800059e:	bd80      	pop	{r7, pc}

080005a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80005a4:	4802      	ldr	r0, [pc, #8]	; (80005b0 <USART2_IRQHandler+0x10>)
 80005a6:	f002 f885 	bl	80026b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80005aa:	bf00      	nop
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	20000040 	.word	0x20000040

080005b4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005b8:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <SystemInit+0x20>)
 80005ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005be:	4a05      	ldr	r2, [pc, #20]	; (80005d4 <SystemInit+0x20>)
 80005c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005c8:	bf00      	nop
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	e000ed00 	.word	0xe000ed00

080005d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000610 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005dc:	480d      	ldr	r0, [pc, #52]	; (8000614 <LoopForever+0x6>)
  ldr r1, =_edata
 80005de:	490e      	ldr	r1, [pc, #56]	; (8000618 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005e0:	4a0e      	ldr	r2, [pc, #56]	; (800061c <LoopForever+0xe>)
  movs r3, #0
 80005e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005e4:	e002      	b.n	80005ec <LoopCopyDataInit>

080005e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005ea:	3304      	adds	r3, #4

080005ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005f0:	d3f9      	bcc.n	80005e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005f2:	4a0b      	ldr	r2, [pc, #44]	; (8000620 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005f4:	4c0b      	ldr	r4, [pc, #44]	; (8000624 <LoopForever+0x16>)
  movs r3, #0
 80005f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005f8:	e001      	b.n	80005fe <LoopFillZerobss>

080005fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005fc:	3204      	adds	r2, #4

080005fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000600:	d3fb      	bcc.n	80005fa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000602:	f7ff ffd7 	bl	80005b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000606:	f003 f98f 	bl	8003928 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800060a:	f7ff fdf3 	bl	80001f4 <main>

0800060e <LoopForever>:

LoopForever:
    b LoopForever
 800060e:	e7fe      	b.n	800060e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000610:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000614:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000618:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 800061c:	080039dc 	.word	0x080039dc
  ldr r2, =_sbss
 8000620:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000624:	200000c8 	.word	0x200000c8

08000628 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000628:	e7fe      	b.n	8000628 <ADC1_2_IRQHandler>
	...

0800062c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000630:	4b08      	ldr	r3, [pc, #32]	; (8000654 <HAL_Init+0x28>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a07      	ldr	r2, [pc, #28]	; (8000654 <HAL_Init+0x28>)
 8000636:	f043 0310 	orr.w	r3, r3, #16
 800063a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800063c:	2003      	movs	r0, #3
 800063e:	f000 f92b 	bl	8000898 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000642:	2000      	movs	r0, #0
 8000644:	f000 f808 	bl	8000658 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000648:	f7ff ff0e 	bl	8000468 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800064c:	2300      	movs	r3, #0
}
 800064e:	4618      	mov	r0, r3
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	40022000 	.word	0x40022000

08000658 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000660:	4b12      	ldr	r3, [pc, #72]	; (80006ac <HAL_InitTick+0x54>)
 8000662:	681a      	ldr	r2, [r3, #0]
 8000664:	4b12      	ldr	r3, [pc, #72]	; (80006b0 <HAL_InitTick+0x58>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	4619      	mov	r1, r3
 800066a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800066e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000672:	fbb2 f3f3 	udiv	r3, r2, r3
 8000676:	4618      	mov	r0, r3
 8000678:	f000 f943 	bl	8000902 <HAL_SYSTICK_Config>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000682:	2301      	movs	r3, #1
 8000684:	e00e      	b.n	80006a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	2b0f      	cmp	r3, #15
 800068a:	d80a      	bhi.n	80006a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800068c:	2200      	movs	r2, #0
 800068e:	6879      	ldr	r1, [r7, #4]
 8000690:	f04f 30ff 	mov.w	r0, #4294967295
 8000694:	f000 f90b 	bl	80008ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000698:	4a06      	ldr	r2, [pc, #24]	; (80006b4 <HAL_InitTick+0x5c>)
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800069e:	2300      	movs	r3, #0
 80006a0:	e000      	b.n	80006a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006a2:	2301      	movs	r3, #1
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	3708      	adds	r7, #8
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	20000010 	.word	0x20000010
 80006b0:	20000018 	.word	0x20000018
 80006b4:	20000014 	.word	0x20000014

080006b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006bc:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <HAL_IncTick+0x20>)
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	461a      	mov	r2, r3
 80006c2:	4b06      	ldr	r3, [pc, #24]	; (80006dc <HAL_IncTick+0x24>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	4413      	add	r3, r2
 80006c8:	4a04      	ldr	r2, [pc, #16]	; (80006dc <HAL_IncTick+0x24>)
 80006ca:	6013      	str	r3, [r2, #0]
}
 80006cc:	bf00      	nop
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	20000018 	.word	0x20000018
 80006dc:	200000c4 	.word	0x200000c4

080006e0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  return uwTick;  
 80006e4:	4b03      	ldr	r3, [pc, #12]	; (80006f4 <HAL_GetTick+0x14>)
 80006e6:	681b      	ldr	r3, [r3, #0]
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	200000c4 	.word	0x200000c4

080006f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b085      	sub	sp, #20
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	f003 0307 	and.w	r3, r3, #7
 8000706:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000708:	4b0c      	ldr	r3, [pc, #48]	; (800073c <__NVIC_SetPriorityGrouping+0x44>)
 800070a:	68db      	ldr	r3, [r3, #12]
 800070c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800070e:	68ba      	ldr	r2, [r7, #8]
 8000710:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000714:	4013      	ands	r3, r2
 8000716:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800071c:	68bb      	ldr	r3, [r7, #8]
 800071e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000720:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000724:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000728:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800072a:	4a04      	ldr	r2, [pc, #16]	; (800073c <__NVIC_SetPriorityGrouping+0x44>)
 800072c:	68bb      	ldr	r3, [r7, #8]
 800072e:	60d3      	str	r3, [r2, #12]
}
 8000730:	bf00      	nop
 8000732:	3714      	adds	r7, #20
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr
 800073c:	e000ed00 	.word	0xe000ed00

08000740 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000744:	4b04      	ldr	r3, [pc, #16]	; (8000758 <__NVIC_GetPriorityGrouping+0x18>)
 8000746:	68db      	ldr	r3, [r3, #12]
 8000748:	0a1b      	lsrs	r3, r3, #8
 800074a:	f003 0307 	and.w	r3, r3, #7
}
 800074e:	4618      	mov	r0, r3
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr
 8000758:	e000ed00 	.word	0xe000ed00

0800075c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800076a:	2b00      	cmp	r3, #0
 800076c:	db0b      	blt.n	8000786 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	f003 021f 	and.w	r2, r3, #31
 8000774:	4907      	ldr	r1, [pc, #28]	; (8000794 <__NVIC_EnableIRQ+0x38>)
 8000776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800077a:	095b      	lsrs	r3, r3, #5
 800077c:	2001      	movs	r0, #1
 800077e:	fa00 f202 	lsl.w	r2, r0, r2
 8000782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000786:	bf00      	nop
 8000788:	370c      	adds	r7, #12
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	e000e100 	.word	0xe000e100

08000798 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	4603      	mov	r3, r0
 80007a0:	6039      	str	r1, [r7, #0]
 80007a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	db0a      	blt.n	80007c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	b2da      	uxtb	r2, r3
 80007b0:	490c      	ldr	r1, [pc, #48]	; (80007e4 <__NVIC_SetPriority+0x4c>)
 80007b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b6:	0112      	lsls	r2, r2, #4
 80007b8:	b2d2      	uxtb	r2, r2
 80007ba:	440b      	add	r3, r1
 80007bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007c0:	e00a      	b.n	80007d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	b2da      	uxtb	r2, r3
 80007c6:	4908      	ldr	r1, [pc, #32]	; (80007e8 <__NVIC_SetPriority+0x50>)
 80007c8:	79fb      	ldrb	r3, [r7, #7]
 80007ca:	f003 030f 	and.w	r3, r3, #15
 80007ce:	3b04      	subs	r3, #4
 80007d0:	0112      	lsls	r2, r2, #4
 80007d2:	b2d2      	uxtb	r2, r2
 80007d4:	440b      	add	r3, r1
 80007d6:	761a      	strb	r2, [r3, #24]
}
 80007d8:	bf00      	nop
 80007da:	370c      	adds	r7, #12
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr
 80007e4:	e000e100 	.word	0xe000e100
 80007e8:	e000ed00 	.word	0xe000ed00

080007ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b089      	sub	sp, #36	; 0x24
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	60f8      	str	r0, [r7, #12]
 80007f4:	60b9      	str	r1, [r7, #8]
 80007f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	f003 0307 	and.w	r3, r3, #7
 80007fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000800:	69fb      	ldr	r3, [r7, #28]
 8000802:	f1c3 0307 	rsb	r3, r3, #7
 8000806:	2b04      	cmp	r3, #4
 8000808:	bf28      	it	cs
 800080a:	2304      	movcs	r3, #4
 800080c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800080e:	69fb      	ldr	r3, [r7, #28]
 8000810:	3304      	adds	r3, #4
 8000812:	2b06      	cmp	r3, #6
 8000814:	d902      	bls.n	800081c <NVIC_EncodePriority+0x30>
 8000816:	69fb      	ldr	r3, [r7, #28]
 8000818:	3b03      	subs	r3, #3
 800081a:	e000      	b.n	800081e <NVIC_EncodePriority+0x32>
 800081c:	2300      	movs	r3, #0
 800081e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000820:	f04f 32ff 	mov.w	r2, #4294967295
 8000824:	69bb      	ldr	r3, [r7, #24]
 8000826:	fa02 f303 	lsl.w	r3, r2, r3
 800082a:	43da      	mvns	r2, r3
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	401a      	ands	r2, r3
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000834:	f04f 31ff 	mov.w	r1, #4294967295
 8000838:	697b      	ldr	r3, [r7, #20]
 800083a:	fa01 f303 	lsl.w	r3, r1, r3
 800083e:	43d9      	mvns	r1, r3
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000844:	4313      	orrs	r3, r2
         );
}
 8000846:	4618      	mov	r0, r3
 8000848:	3724      	adds	r7, #36	; 0x24
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
	...

08000854 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	3b01      	subs	r3, #1
 8000860:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000864:	d301      	bcc.n	800086a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000866:	2301      	movs	r3, #1
 8000868:	e00f      	b.n	800088a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800086a:	4a0a      	ldr	r2, [pc, #40]	; (8000894 <SysTick_Config+0x40>)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	3b01      	subs	r3, #1
 8000870:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000872:	210f      	movs	r1, #15
 8000874:	f04f 30ff 	mov.w	r0, #4294967295
 8000878:	f7ff ff8e 	bl	8000798 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800087c:	4b05      	ldr	r3, [pc, #20]	; (8000894 <SysTick_Config+0x40>)
 800087e:	2200      	movs	r2, #0
 8000880:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000882:	4b04      	ldr	r3, [pc, #16]	; (8000894 <SysTick_Config+0x40>)
 8000884:	2207      	movs	r2, #7
 8000886:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000888:	2300      	movs	r3, #0
}
 800088a:	4618      	mov	r0, r3
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	e000e010 	.word	0xe000e010

08000898 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008a0:	6878      	ldr	r0, [r7, #4]
 80008a2:	f7ff ff29 	bl	80006f8 <__NVIC_SetPriorityGrouping>
}
 80008a6:	bf00      	nop
 80008a8:	3708      	adds	r7, #8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}

080008ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008ae:	b580      	push	{r7, lr}
 80008b0:	b086      	sub	sp, #24
 80008b2:	af00      	add	r7, sp, #0
 80008b4:	4603      	mov	r3, r0
 80008b6:	60b9      	str	r1, [r7, #8]
 80008b8:	607a      	str	r2, [r7, #4]
 80008ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008bc:	2300      	movs	r3, #0
 80008be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008c0:	f7ff ff3e 	bl	8000740 <__NVIC_GetPriorityGrouping>
 80008c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008c6:	687a      	ldr	r2, [r7, #4]
 80008c8:	68b9      	ldr	r1, [r7, #8]
 80008ca:	6978      	ldr	r0, [r7, #20]
 80008cc:	f7ff ff8e 	bl	80007ec <NVIC_EncodePriority>
 80008d0:	4602      	mov	r2, r0
 80008d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008d6:	4611      	mov	r1, r2
 80008d8:	4618      	mov	r0, r3
 80008da:	f7ff ff5d 	bl	8000798 <__NVIC_SetPriority>
}
 80008de:	bf00      	nop
 80008e0:	3718      	adds	r7, #24
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}

080008e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008e6:	b580      	push	{r7, lr}
 80008e8:	b082      	sub	sp, #8
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	4603      	mov	r3, r0
 80008ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff ff31 	bl	800075c <__NVIC_EnableIRQ>
}
 80008fa:	bf00      	nop
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}

08000902 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000902:	b580      	push	{r7, lr}
 8000904:	b082      	sub	sp, #8
 8000906:	af00      	add	r7, sp, #0
 8000908:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800090a:	6878      	ldr	r0, [r7, #4]
 800090c:	f7ff ffa2 	bl	8000854 <SysTick_Config>
 8000910:	4603      	mov	r3, r0
}
 8000912:	4618      	mov	r0, r3
 8000914:	3708      	adds	r7, #8
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}

0800091a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800091a:	b480      	push	{r7}
 800091c:	b083      	sub	sp, #12
 800091e:	af00      	add	r7, sp, #0
 8000920:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000928:	2b02      	cmp	r3, #2
 800092a:	d008      	beq.n	800093e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	2204      	movs	r2, #4
 8000930:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	2200      	movs	r2, #0
 8000936:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800093a:	2301      	movs	r3, #1
 800093c:	e020      	b.n	8000980 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	681a      	ldr	r2, [r3, #0]
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	f022 020e 	bic.w	r2, r2, #14
 800094c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	681a      	ldr	r2, [r3, #0]
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f022 0201 	bic.w	r2, r2, #1
 800095c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000966:	2101      	movs	r1, #1
 8000968:	fa01 f202 	lsl.w	r2, r1, r2
 800096c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	2201      	movs	r2, #1
 8000972:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	2200      	movs	r2, #0
 800097a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800097e:	2300      	movs	r3, #0
}
 8000980:	4618      	mov	r0, r3
 8000982:	370c      	adds	r7, #12
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr

0800098c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800098c:	b580      	push	{r7, lr}
 800098e:	b084      	sub	sp, #16
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000994:	2300      	movs	r3, #0
 8000996:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800099e:	2b02      	cmp	r3, #2
 80009a0:	d005      	beq.n	80009ae <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2204      	movs	r2, #4
 80009a6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80009a8:	2301      	movs	r3, #1
 80009aa:	73fb      	strb	r3, [r7, #15]
 80009ac:	e027      	b.n	80009fe <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	681a      	ldr	r2, [r3, #0]
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f022 020e 	bic.w	r2, r2, #14
 80009bc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	681a      	ldr	r2, [r3, #0]
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f022 0201 	bic.w	r2, r2, #1
 80009cc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80009d6:	2101      	movs	r1, #1
 80009d8:	fa01 f202 	lsl.w	r2, r1, r2
 80009dc:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	2201      	movs	r2, #1
 80009e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	2200      	movs	r2, #0
 80009ea:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d003      	beq.n	80009fe <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009fa:	6878      	ldr	r0, [r7, #4]
 80009fc:	4798      	blx	r3
    } 
  }
  return status;
 80009fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	3710      	adds	r7, #16
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}

08000a08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b087      	sub	sp, #28
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
 8000a10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a12:	2300      	movs	r3, #0
 8000a14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a16:	e160      	b.n	8000cda <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	681a      	ldr	r2, [r3, #0]
 8000a1c:	2101      	movs	r1, #1
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	fa01 f303 	lsl.w	r3, r1, r3
 8000a24:	4013      	ands	r3, r2
 8000a26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	f000 8152 	beq.w	8000cd4 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	f003 0303 	and.w	r3, r3, #3
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	d005      	beq.n	8000a48 <HAL_GPIO_Init+0x40>
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	f003 0303 	and.w	r3, r3, #3
 8000a44:	2b02      	cmp	r3, #2
 8000a46:	d130      	bne.n	8000aaa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	689b      	ldr	r3, [r3, #8]
 8000a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a4e:	697b      	ldr	r3, [r7, #20]
 8000a50:	005b      	lsls	r3, r3, #1
 8000a52:	2203      	movs	r2, #3
 8000a54:	fa02 f303 	lsl.w	r3, r2, r3
 8000a58:	43db      	mvns	r3, r3
 8000a5a:	693a      	ldr	r2, [r7, #16]
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	68da      	ldr	r2, [r3, #12]
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	005b      	lsls	r3, r3, #1
 8000a68:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6c:	693a      	ldr	r2, [r7, #16]
 8000a6e:	4313      	orrs	r3, r2
 8000a70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	693a      	ldr	r2, [r7, #16]
 8000a76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a7e:	2201      	movs	r2, #1
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	fa02 f303 	lsl.w	r3, r2, r3
 8000a86:	43db      	mvns	r3, r3
 8000a88:	693a      	ldr	r2, [r7, #16]
 8000a8a:	4013      	ands	r3, r2
 8000a8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	091b      	lsrs	r3, r3, #4
 8000a94:	f003 0201 	and.w	r2, r3, #1
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9e:	693a      	ldr	r2, [r7, #16]
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	693a      	ldr	r2, [r7, #16]
 8000aa8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	f003 0303 	and.w	r3, r3, #3
 8000ab2:	2b03      	cmp	r3, #3
 8000ab4:	d017      	beq.n	8000ae6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	68db      	ldr	r3, [r3, #12]
 8000aba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	005b      	lsls	r3, r3, #1
 8000ac0:	2203      	movs	r2, #3
 8000ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac6:	43db      	mvns	r3, r3
 8000ac8:	693a      	ldr	r2, [r7, #16]
 8000aca:	4013      	ands	r3, r2
 8000acc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	689a      	ldr	r2, [r3, #8]
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	005b      	lsls	r3, r3, #1
 8000ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ada:	693a      	ldr	r2, [r7, #16]
 8000adc:	4313      	orrs	r3, r2
 8000ade:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	693a      	ldr	r2, [r7, #16]
 8000ae4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	f003 0303 	and.w	r3, r3, #3
 8000aee:	2b02      	cmp	r3, #2
 8000af0:	d123      	bne.n	8000b3a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	08da      	lsrs	r2, r3, #3
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	3208      	adds	r2, #8
 8000afa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000afe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	f003 0307 	and.w	r3, r3, #7
 8000b06:	009b      	lsls	r3, r3, #2
 8000b08:	220f      	movs	r2, #15
 8000b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0e:	43db      	mvns	r3, r3
 8000b10:	693a      	ldr	r2, [r7, #16]
 8000b12:	4013      	ands	r3, r2
 8000b14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	691a      	ldr	r2, [r3, #16]
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	f003 0307 	and.w	r3, r3, #7
 8000b20:	009b      	lsls	r3, r3, #2
 8000b22:	fa02 f303 	lsl.w	r3, r2, r3
 8000b26:	693a      	ldr	r2, [r7, #16]
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	08da      	lsrs	r2, r3, #3
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	3208      	adds	r2, #8
 8000b34:	6939      	ldr	r1, [r7, #16]
 8000b36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	005b      	lsls	r3, r3, #1
 8000b44:	2203      	movs	r2, #3
 8000b46:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4a:	43db      	mvns	r3, r3
 8000b4c:	693a      	ldr	r2, [r7, #16]
 8000b4e:	4013      	ands	r3, r2
 8000b50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	f003 0203 	and.w	r2, r3, #3
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	005b      	lsls	r3, r3, #1
 8000b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	4313      	orrs	r3, r2
 8000b66:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	693a      	ldr	r2, [r7, #16]
 8000b6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	f000 80ac 	beq.w	8000cd4 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b7c:	4b5e      	ldr	r3, [pc, #376]	; (8000cf8 <HAL_GPIO_Init+0x2f0>)
 8000b7e:	699b      	ldr	r3, [r3, #24]
 8000b80:	4a5d      	ldr	r2, [pc, #372]	; (8000cf8 <HAL_GPIO_Init+0x2f0>)
 8000b82:	f043 0301 	orr.w	r3, r3, #1
 8000b86:	6193      	str	r3, [r2, #24]
 8000b88:	4b5b      	ldr	r3, [pc, #364]	; (8000cf8 <HAL_GPIO_Init+0x2f0>)
 8000b8a:	699b      	ldr	r3, [r3, #24]
 8000b8c:	f003 0301 	and.w	r3, r3, #1
 8000b90:	60bb      	str	r3, [r7, #8]
 8000b92:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b94:	4a59      	ldr	r2, [pc, #356]	; (8000cfc <HAL_GPIO_Init+0x2f4>)
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	089b      	lsrs	r3, r3, #2
 8000b9a:	3302      	adds	r3, #2
 8000b9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	f003 0303 	and.w	r3, r3, #3
 8000ba8:	009b      	lsls	r3, r3, #2
 8000baa:	220f      	movs	r2, #15
 8000bac:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb0:	43db      	mvns	r3, r3
 8000bb2:	693a      	ldr	r2, [r7, #16]
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000bbe:	d025      	beq.n	8000c0c <HAL_GPIO_Init+0x204>
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	4a4f      	ldr	r2, [pc, #316]	; (8000d00 <HAL_GPIO_Init+0x2f8>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d01f      	beq.n	8000c08 <HAL_GPIO_Init+0x200>
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	4a4e      	ldr	r2, [pc, #312]	; (8000d04 <HAL_GPIO_Init+0x2fc>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d019      	beq.n	8000c04 <HAL_GPIO_Init+0x1fc>
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	4a4d      	ldr	r2, [pc, #308]	; (8000d08 <HAL_GPIO_Init+0x300>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d013      	beq.n	8000c00 <HAL_GPIO_Init+0x1f8>
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	4a4c      	ldr	r2, [pc, #304]	; (8000d0c <HAL_GPIO_Init+0x304>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d00d      	beq.n	8000bfc <HAL_GPIO_Init+0x1f4>
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	4a4b      	ldr	r2, [pc, #300]	; (8000d10 <HAL_GPIO_Init+0x308>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d007      	beq.n	8000bf8 <HAL_GPIO_Init+0x1f0>
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	4a4a      	ldr	r2, [pc, #296]	; (8000d14 <HAL_GPIO_Init+0x30c>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d101      	bne.n	8000bf4 <HAL_GPIO_Init+0x1ec>
 8000bf0:	2306      	movs	r3, #6
 8000bf2:	e00c      	b.n	8000c0e <HAL_GPIO_Init+0x206>
 8000bf4:	2307      	movs	r3, #7
 8000bf6:	e00a      	b.n	8000c0e <HAL_GPIO_Init+0x206>
 8000bf8:	2305      	movs	r3, #5
 8000bfa:	e008      	b.n	8000c0e <HAL_GPIO_Init+0x206>
 8000bfc:	2304      	movs	r3, #4
 8000bfe:	e006      	b.n	8000c0e <HAL_GPIO_Init+0x206>
 8000c00:	2303      	movs	r3, #3
 8000c02:	e004      	b.n	8000c0e <HAL_GPIO_Init+0x206>
 8000c04:	2302      	movs	r3, #2
 8000c06:	e002      	b.n	8000c0e <HAL_GPIO_Init+0x206>
 8000c08:	2301      	movs	r3, #1
 8000c0a:	e000      	b.n	8000c0e <HAL_GPIO_Init+0x206>
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	697a      	ldr	r2, [r7, #20]
 8000c10:	f002 0203 	and.w	r2, r2, #3
 8000c14:	0092      	lsls	r2, r2, #2
 8000c16:	4093      	lsls	r3, r2
 8000c18:	693a      	ldr	r2, [r7, #16]
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c1e:	4937      	ldr	r1, [pc, #220]	; (8000cfc <HAL_GPIO_Init+0x2f4>)
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	089b      	lsrs	r3, r3, #2
 8000c24:	3302      	adds	r3, #2
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c2c:	4b3a      	ldr	r3, [pc, #232]	; (8000d18 <HAL_GPIO_Init+0x310>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	43db      	mvns	r3, r3
 8000c36:	693a      	ldr	r2, [r7, #16]
 8000c38:	4013      	ands	r3, r2
 8000c3a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d003      	beq.n	8000c50 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000c48:	693a      	ldr	r2, [r7, #16]
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c50:	4a31      	ldr	r2, [pc, #196]	; (8000d18 <HAL_GPIO_Init+0x310>)
 8000c52:	693b      	ldr	r3, [r7, #16]
 8000c54:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000c56:	4b30      	ldr	r3, [pc, #192]	; (8000d18 <HAL_GPIO_Init+0x310>)
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	43db      	mvns	r3, r3
 8000c60:	693a      	ldr	r2, [r7, #16]
 8000c62:	4013      	ands	r3, r2
 8000c64:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d003      	beq.n	8000c7a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	4313      	orrs	r3, r2
 8000c78:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c7a:	4a27      	ldr	r2, [pc, #156]	; (8000d18 <HAL_GPIO_Init+0x310>)
 8000c7c:	693b      	ldr	r3, [r7, #16]
 8000c7e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c80:	4b25      	ldr	r3, [pc, #148]	; (8000d18 <HAL_GPIO_Init+0x310>)
 8000c82:	689b      	ldr	r3, [r3, #8]
 8000c84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	43db      	mvns	r3, r3
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d003      	beq.n	8000ca4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000c9c:	693a      	ldr	r2, [r7, #16]
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ca4:	4a1c      	ldr	r2, [pc, #112]	; (8000d18 <HAL_GPIO_Init+0x310>)
 8000ca6:	693b      	ldr	r3, [r7, #16]
 8000ca8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000caa:	4b1b      	ldr	r3, [pc, #108]	; (8000d18 <HAL_GPIO_Init+0x310>)
 8000cac:	68db      	ldr	r3, [r3, #12]
 8000cae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	43db      	mvns	r3, r3
 8000cb4:	693a      	ldr	r2, [r7, #16]
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d003      	beq.n	8000cce <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000cce:	4a12      	ldr	r2, [pc, #72]	; (8000d18 <HAL_GPIO_Init+0x310>)
 8000cd0:	693b      	ldr	r3, [r7, #16]
 8000cd2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	f47f ae97 	bne.w	8000a18 <HAL_GPIO_Init+0x10>
  }
}
 8000cea:	bf00      	nop
 8000cec:	371c      	adds	r7, #28
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	40021000 	.word	0x40021000
 8000cfc:	40010000 	.word	0x40010000
 8000d00:	48000400 	.word	0x48000400
 8000d04:	48000800 	.word	0x48000800
 8000d08:	48000c00 	.word	0x48000c00
 8000d0c:	48001000 	.word	0x48001000
 8000d10:	48001400 	.word	0x48001400
 8000d14:	48001800 	.word	0x48001800
 8000d18:	40010400 	.word	0x40010400

08000d1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	460b      	mov	r3, r1
 8000d26:	807b      	strh	r3, [r7, #2]
 8000d28:	4613      	mov	r3, r2
 8000d2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d2c:	787b      	ldrb	r3, [r7, #1]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d003      	beq.n	8000d3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d32:	887a      	ldrh	r2, [r7, #2]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d38:	e002      	b.n	8000d40 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d3a:	887a      	ldrh	r2, [r7, #2]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d40:	bf00      	nop
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b085      	sub	sp, #20
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	460b      	mov	r3, r1
 8000d56:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	695b      	ldr	r3, [r3, #20]
 8000d5c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d5e:	887a      	ldrh	r2, [r7, #2]
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	4013      	ands	r3, r2
 8000d64:	041a      	lsls	r2, r3, #16
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	43d9      	mvns	r1, r3
 8000d6a:	887b      	ldrh	r3, [r7, #2]
 8000d6c:	400b      	ands	r3, r1
 8000d6e:	431a      	orrs	r2, r3
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	619a      	str	r2, [r3, #24]
}
 8000d74:	bf00      	nop
 8000d76:	3714      	adds	r7, #20
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr

08000d80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	1d3b      	adds	r3, r7, #4
 8000d8a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d8c:	1d3b      	adds	r3, r7, #4
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d102      	bne.n	8000d9a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000d94:	2301      	movs	r3, #1
 8000d96:	f000 bf01 	b.w	8001b9c <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d9a:	1d3b      	adds	r3, r7, #4
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f003 0301 	and.w	r3, r3, #1
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	f000 8160 	beq.w	800106a <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000daa:	4bae      	ldr	r3, [pc, #696]	; (8001064 <HAL_RCC_OscConfig+0x2e4>)
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	f003 030c 	and.w	r3, r3, #12
 8000db2:	2b04      	cmp	r3, #4
 8000db4:	d00c      	beq.n	8000dd0 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000db6:	4bab      	ldr	r3, [pc, #684]	; (8001064 <HAL_RCC_OscConfig+0x2e4>)
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	f003 030c 	and.w	r3, r3, #12
 8000dbe:	2b08      	cmp	r3, #8
 8000dc0:	d159      	bne.n	8000e76 <HAL_RCC_OscConfig+0xf6>
 8000dc2:	4ba8      	ldr	r3, [pc, #672]	; (8001064 <HAL_RCC_OscConfig+0x2e4>)
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000dca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dce:	d152      	bne.n	8000e76 <HAL_RCC_OscConfig+0xf6>
 8000dd0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dd4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dd8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000ddc:	fa93 f3a3 	rbit	r3, r3
 8000de0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000de4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000de8:	fab3 f383 	clz	r3, r3
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	095b      	lsrs	r3, r3, #5
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	f043 0301 	orr.w	r3, r3, #1
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	2b01      	cmp	r3, #1
 8000dfa:	d102      	bne.n	8000e02 <HAL_RCC_OscConfig+0x82>
 8000dfc:	4b99      	ldr	r3, [pc, #612]	; (8001064 <HAL_RCC_OscConfig+0x2e4>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	e015      	b.n	8000e2e <HAL_RCC_OscConfig+0xae>
 8000e02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e06:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e0a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000e0e:	fa93 f3a3 	rbit	r3, r3
 8000e12:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000e16:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e1a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000e1e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000e22:	fa93 f3a3 	rbit	r3, r3
 8000e26:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000e2a:	4b8e      	ldr	r3, [pc, #568]	; (8001064 <HAL_RCC_OscConfig+0x2e4>)
 8000e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e2e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e32:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000e36:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000e3a:	fa92 f2a2 	rbit	r2, r2
 8000e3e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8000e42:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000e46:	fab2 f282 	clz	r2, r2
 8000e4a:	b2d2      	uxtb	r2, r2
 8000e4c:	f042 0220 	orr.w	r2, r2, #32
 8000e50:	b2d2      	uxtb	r2, r2
 8000e52:	f002 021f 	and.w	r2, r2, #31
 8000e56:	2101      	movs	r1, #1
 8000e58:	fa01 f202 	lsl.w	r2, r1, r2
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	f000 8102 	beq.w	8001068 <HAL_RCC_OscConfig+0x2e8>
 8000e64:	1d3b      	adds	r3, r7, #4
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	f040 80fc 	bne.w	8001068 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8000e70:	2301      	movs	r3, #1
 8000e72:	f000 be93 	b.w	8001b9c <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e76:	1d3b      	adds	r3, r7, #4
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e80:	d106      	bne.n	8000e90 <HAL_RCC_OscConfig+0x110>
 8000e82:	4b78      	ldr	r3, [pc, #480]	; (8001064 <HAL_RCC_OscConfig+0x2e4>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a77      	ldr	r2, [pc, #476]	; (8001064 <HAL_RCC_OscConfig+0x2e4>)
 8000e88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e8c:	6013      	str	r3, [r2, #0]
 8000e8e:	e030      	b.n	8000ef2 <HAL_RCC_OscConfig+0x172>
 8000e90:	1d3b      	adds	r3, r7, #4
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d10c      	bne.n	8000eb4 <HAL_RCC_OscConfig+0x134>
 8000e9a:	4b72      	ldr	r3, [pc, #456]	; (8001064 <HAL_RCC_OscConfig+0x2e4>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a71      	ldr	r2, [pc, #452]	; (8001064 <HAL_RCC_OscConfig+0x2e4>)
 8000ea0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ea4:	6013      	str	r3, [r2, #0]
 8000ea6:	4b6f      	ldr	r3, [pc, #444]	; (8001064 <HAL_RCC_OscConfig+0x2e4>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a6e      	ldr	r2, [pc, #440]	; (8001064 <HAL_RCC_OscConfig+0x2e4>)
 8000eac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000eb0:	6013      	str	r3, [r2, #0]
 8000eb2:	e01e      	b.n	8000ef2 <HAL_RCC_OscConfig+0x172>
 8000eb4:	1d3b      	adds	r3, r7, #4
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ebe:	d10c      	bne.n	8000eda <HAL_RCC_OscConfig+0x15a>
 8000ec0:	4b68      	ldr	r3, [pc, #416]	; (8001064 <HAL_RCC_OscConfig+0x2e4>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a67      	ldr	r2, [pc, #412]	; (8001064 <HAL_RCC_OscConfig+0x2e4>)
 8000ec6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000eca:	6013      	str	r3, [r2, #0]
 8000ecc:	4b65      	ldr	r3, [pc, #404]	; (8001064 <HAL_RCC_OscConfig+0x2e4>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a64      	ldr	r2, [pc, #400]	; (8001064 <HAL_RCC_OscConfig+0x2e4>)
 8000ed2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ed6:	6013      	str	r3, [r2, #0]
 8000ed8:	e00b      	b.n	8000ef2 <HAL_RCC_OscConfig+0x172>
 8000eda:	4b62      	ldr	r3, [pc, #392]	; (8001064 <HAL_RCC_OscConfig+0x2e4>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a61      	ldr	r2, [pc, #388]	; (8001064 <HAL_RCC_OscConfig+0x2e4>)
 8000ee0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ee4:	6013      	str	r3, [r2, #0]
 8000ee6:	4b5f      	ldr	r3, [pc, #380]	; (8001064 <HAL_RCC_OscConfig+0x2e4>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a5e      	ldr	r2, [pc, #376]	; (8001064 <HAL_RCC_OscConfig+0x2e4>)
 8000eec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ef0:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ef2:	1d3b      	adds	r3, r7, #4
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d059      	beq.n	8000fb0 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000efc:	f7ff fbf0 	bl	80006e0 <HAL_GetTick>
 8000f00:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f04:	e00a      	b.n	8000f1c <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f06:	f7ff fbeb 	bl	80006e0 <HAL_GetTick>
 8000f0a:	4602      	mov	r2, r0
 8000f0c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	2b64      	cmp	r3, #100	; 0x64
 8000f14:	d902      	bls.n	8000f1c <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8000f16:	2303      	movs	r3, #3
 8000f18:	f000 be40 	b.w	8001b9c <HAL_RCC_OscConfig+0xe1c>
 8000f1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f20:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f24:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000f28:	fa93 f3a3 	rbit	r3, r3
 8000f2c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8000f30:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f34:	fab3 f383 	clz	r3, r3
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	095b      	lsrs	r3, r3, #5
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	f043 0301 	orr.w	r3, r3, #1
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d102      	bne.n	8000f4e <HAL_RCC_OscConfig+0x1ce>
 8000f48:	4b46      	ldr	r3, [pc, #280]	; (8001064 <HAL_RCC_OscConfig+0x2e4>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	e015      	b.n	8000f7a <HAL_RCC_OscConfig+0x1fa>
 8000f4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f52:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f56:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000f5a:	fa93 f3a3 	rbit	r3, r3
 8000f5e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8000f62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f66:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000f6a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000f6e:	fa93 f3a3 	rbit	r3, r3
 8000f72:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000f76:	4b3b      	ldr	r3, [pc, #236]	; (8001064 <HAL_RCC_OscConfig+0x2e4>)
 8000f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f7a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f7e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8000f82:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8000f86:	fa92 f2a2 	rbit	r2, r2
 8000f8a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8000f8e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000f92:	fab2 f282 	clz	r2, r2
 8000f96:	b2d2      	uxtb	r2, r2
 8000f98:	f042 0220 	orr.w	r2, r2, #32
 8000f9c:	b2d2      	uxtb	r2, r2
 8000f9e:	f002 021f 	and.w	r2, r2, #31
 8000fa2:	2101      	movs	r1, #1
 8000fa4:	fa01 f202 	lsl.w	r2, r1, r2
 8000fa8:	4013      	ands	r3, r2
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d0ab      	beq.n	8000f06 <HAL_RCC_OscConfig+0x186>
 8000fae:	e05c      	b.n	800106a <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fb0:	f7ff fb96 	bl	80006e0 <HAL_GetTick>
 8000fb4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fb8:	e00a      	b.n	8000fd0 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fba:	f7ff fb91 	bl	80006e0 <HAL_GetTick>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	2b64      	cmp	r3, #100	; 0x64
 8000fc8:	d902      	bls.n	8000fd0 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	f000 bde6 	b.w	8001b9c <HAL_RCC_OscConfig+0xe1c>
 8000fd0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fd4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fd8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000fdc:	fa93 f3a3 	rbit	r3, r3
 8000fe0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8000fe4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fe8:	fab3 f383 	clz	r3, r3
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	095b      	lsrs	r3, r3, #5
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	f043 0301 	orr.w	r3, r3, #1
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d102      	bne.n	8001002 <HAL_RCC_OscConfig+0x282>
 8000ffc:	4b19      	ldr	r3, [pc, #100]	; (8001064 <HAL_RCC_OscConfig+0x2e4>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	e015      	b.n	800102e <HAL_RCC_OscConfig+0x2ae>
 8001002:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001006:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800100a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800100e:	fa93 f3a3 	rbit	r3, r3
 8001012:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001016:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800101a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800101e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001022:	fa93 f3a3 	rbit	r3, r3
 8001026:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800102a:	4b0e      	ldr	r3, [pc, #56]	; (8001064 <HAL_RCC_OscConfig+0x2e4>)
 800102c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800102e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001032:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001036:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800103a:	fa92 f2a2 	rbit	r2, r2
 800103e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001042:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001046:	fab2 f282 	clz	r2, r2
 800104a:	b2d2      	uxtb	r2, r2
 800104c:	f042 0220 	orr.w	r2, r2, #32
 8001050:	b2d2      	uxtb	r2, r2
 8001052:	f002 021f 	and.w	r2, r2, #31
 8001056:	2101      	movs	r1, #1
 8001058:	fa01 f202 	lsl.w	r2, r1, r2
 800105c:	4013      	ands	r3, r2
 800105e:	2b00      	cmp	r3, #0
 8001060:	d1ab      	bne.n	8000fba <HAL_RCC_OscConfig+0x23a>
 8001062:	e002      	b.n	800106a <HAL_RCC_OscConfig+0x2ea>
 8001064:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001068:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800106a:	1d3b      	adds	r3, r7, #4
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f003 0302 	and.w	r3, r3, #2
 8001074:	2b00      	cmp	r3, #0
 8001076:	f000 8170 	beq.w	800135a <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800107a:	4bd0      	ldr	r3, [pc, #832]	; (80013bc <HAL_RCC_OscConfig+0x63c>)
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f003 030c 	and.w	r3, r3, #12
 8001082:	2b00      	cmp	r3, #0
 8001084:	d00c      	beq.n	80010a0 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001086:	4bcd      	ldr	r3, [pc, #820]	; (80013bc <HAL_RCC_OscConfig+0x63c>)
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f003 030c 	and.w	r3, r3, #12
 800108e:	2b08      	cmp	r3, #8
 8001090:	d16d      	bne.n	800116e <HAL_RCC_OscConfig+0x3ee>
 8001092:	4bca      	ldr	r3, [pc, #808]	; (80013bc <HAL_RCC_OscConfig+0x63c>)
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800109a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800109e:	d166      	bne.n	800116e <HAL_RCC_OscConfig+0x3ee>
 80010a0:	2302      	movs	r3, #2
 80010a2:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010a6:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80010aa:	fa93 f3a3 	rbit	r3, r3
 80010ae:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80010b2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010b6:	fab3 f383 	clz	r3, r3
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	095b      	lsrs	r3, r3, #5
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	f043 0301 	orr.w	r3, r3, #1
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d102      	bne.n	80010d0 <HAL_RCC_OscConfig+0x350>
 80010ca:	4bbc      	ldr	r3, [pc, #752]	; (80013bc <HAL_RCC_OscConfig+0x63c>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	e013      	b.n	80010f8 <HAL_RCC_OscConfig+0x378>
 80010d0:	2302      	movs	r3, #2
 80010d2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010d6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80010da:	fa93 f3a3 	rbit	r3, r3
 80010de:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80010e2:	2302      	movs	r3, #2
 80010e4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80010e8:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80010ec:	fa93 f3a3 	rbit	r3, r3
 80010f0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80010f4:	4bb1      	ldr	r3, [pc, #708]	; (80013bc <HAL_RCC_OscConfig+0x63c>)
 80010f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f8:	2202      	movs	r2, #2
 80010fa:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80010fe:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001102:	fa92 f2a2 	rbit	r2, r2
 8001106:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 800110a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800110e:	fab2 f282 	clz	r2, r2
 8001112:	b2d2      	uxtb	r2, r2
 8001114:	f042 0220 	orr.w	r2, r2, #32
 8001118:	b2d2      	uxtb	r2, r2
 800111a:	f002 021f 	and.w	r2, r2, #31
 800111e:	2101      	movs	r1, #1
 8001120:	fa01 f202 	lsl.w	r2, r1, r2
 8001124:	4013      	ands	r3, r2
 8001126:	2b00      	cmp	r3, #0
 8001128:	d007      	beq.n	800113a <HAL_RCC_OscConfig+0x3ba>
 800112a:	1d3b      	adds	r3, r7, #4
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	2b01      	cmp	r3, #1
 8001132:	d002      	beq.n	800113a <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8001134:	2301      	movs	r3, #1
 8001136:	f000 bd31 	b.w	8001b9c <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800113a:	4ba0      	ldr	r3, [pc, #640]	; (80013bc <HAL_RCC_OscConfig+0x63c>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001142:	1d3b      	adds	r3, r7, #4
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	691b      	ldr	r3, [r3, #16]
 8001148:	21f8      	movs	r1, #248	; 0xf8
 800114a:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800114e:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001152:	fa91 f1a1 	rbit	r1, r1
 8001156:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800115a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800115e:	fab1 f181 	clz	r1, r1
 8001162:	b2c9      	uxtb	r1, r1
 8001164:	408b      	lsls	r3, r1
 8001166:	4995      	ldr	r1, [pc, #596]	; (80013bc <HAL_RCC_OscConfig+0x63c>)
 8001168:	4313      	orrs	r3, r2
 800116a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800116c:	e0f5      	b.n	800135a <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800116e:	1d3b      	adds	r3, r7, #4
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	2b00      	cmp	r3, #0
 8001176:	f000 8085 	beq.w	8001284 <HAL_RCC_OscConfig+0x504>
 800117a:	2301      	movs	r3, #1
 800117c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001180:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001184:	fa93 f3a3 	rbit	r3, r3
 8001188:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 800118c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001190:	fab3 f383 	clz	r3, r3
 8001194:	b2db      	uxtb	r3, r3
 8001196:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800119a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	461a      	mov	r2, r3
 80011a2:	2301      	movs	r3, #1
 80011a4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a6:	f7ff fa9b 	bl	80006e0 <HAL_GetTick>
 80011aa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011ae:	e00a      	b.n	80011c6 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011b0:	f7ff fa96 	bl	80006e0 <HAL_GetTick>
 80011b4:	4602      	mov	r2, r0
 80011b6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80011ba:	1ad3      	subs	r3, r2, r3
 80011bc:	2b02      	cmp	r3, #2
 80011be:	d902      	bls.n	80011c6 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80011c0:	2303      	movs	r3, #3
 80011c2:	f000 bceb 	b.w	8001b9c <HAL_RCC_OscConfig+0xe1c>
 80011c6:	2302      	movs	r3, #2
 80011c8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011cc:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80011d0:	fa93 f3a3 	rbit	r3, r3
 80011d4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80011d8:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011dc:	fab3 f383 	clz	r3, r3
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	095b      	lsrs	r3, r3, #5
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	f043 0301 	orr.w	r3, r3, #1
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d102      	bne.n	80011f6 <HAL_RCC_OscConfig+0x476>
 80011f0:	4b72      	ldr	r3, [pc, #456]	; (80013bc <HAL_RCC_OscConfig+0x63c>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	e013      	b.n	800121e <HAL_RCC_OscConfig+0x49e>
 80011f6:	2302      	movs	r3, #2
 80011f8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011fc:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001200:	fa93 f3a3 	rbit	r3, r3
 8001204:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001208:	2302      	movs	r3, #2
 800120a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800120e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001212:	fa93 f3a3 	rbit	r3, r3
 8001216:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800121a:	4b68      	ldr	r3, [pc, #416]	; (80013bc <HAL_RCC_OscConfig+0x63c>)
 800121c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121e:	2202      	movs	r2, #2
 8001220:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001224:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001228:	fa92 f2a2 	rbit	r2, r2
 800122c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001230:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001234:	fab2 f282 	clz	r2, r2
 8001238:	b2d2      	uxtb	r2, r2
 800123a:	f042 0220 	orr.w	r2, r2, #32
 800123e:	b2d2      	uxtb	r2, r2
 8001240:	f002 021f 	and.w	r2, r2, #31
 8001244:	2101      	movs	r1, #1
 8001246:	fa01 f202 	lsl.w	r2, r1, r2
 800124a:	4013      	ands	r3, r2
 800124c:	2b00      	cmp	r3, #0
 800124e:	d0af      	beq.n	80011b0 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001250:	4b5a      	ldr	r3, [pc, #360]	; (80013bc <HAL_RCC_OscConfig+0x63c>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001258:	1d3b      	adds	r3, r7, #4
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	691b      	ldr	r3, [r3, #16]
 800125e:	21f8      	movs	r1, #248	; 0xf8
 8001260:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001264:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001268:	fa91 f1a1 	rbit	r1, r1
 800126c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001270:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001274:	fab1 f181 	clz	r1, r1
 8001278:	b2c9      	uxtb	r1, r1
 800127a:	408b      	lsls	r3, r1
 800127c:	494f      	ldr	r1, [pc, #316]	; (80013bc <HAL_RCC_OscConfig+0x63c>)
 800127e:	4313      	orrs	r3, r2
 8001280:	600b      	str	r3, [r1, #0]
 8001282:	e06a      	b.n	800135a <HAL_RCC_OscConfig+0x5da>
 8001284:	2301      	movs	r3, #1
 8001286:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800128a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800128e:	fa93 f3a3 	rbit	r3, r3
 8001292:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001296:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800129a:	fab3 f383 	clz	r3, r3
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80012a4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	461a      	mov	r2, r3
 80012ac:	2300      	movs	r3, #0
 80012ae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b0:	f7ff fa16 	bl	80006e0 <HAL_GetTick>
 80012b4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012b8:	e00a      	b.n	80012d0 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012ba:	f7ff fa11 	bl	80006e0 <HAL_GetTick>
 80012be:	4602      	mov	r2, r0
 80012c0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d902      	bls.n	80012d0 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 80012ca:	2303      	movs	r3, #3
 80012cc:	f000 bc66 	b.w	8001b9c <HAL_RCC_OscConfig+0xe1c>
 80012d0:	2302      	movs	r3, #2
 80012d2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012d6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80012da:	fa93 f3a3 	rbit	r3, r3
 80012de:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80012e2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012e6:	fab3 f383 	clz	r3, r3
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	095b      	lsrs	r3, r3, #5
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	f043 0301 	orr.w	r3, r3, #1
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d102      	bne.n	8001300 <HAL_RCC_OscConfig+0x580>
 80012fa:	4b30      	ldr	r3, [pc, #192]	; (80013bc <HAL_RCC_OscConfig+0x63c>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	e013      	b.n	8001328 <HAL_RCC_OscConfig+0x5a8>
 8001300:	2302      	movs	r3, #2
 8001302:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001306:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800130a:	fa93 f3a3 	rbit	r3, r3
 800130e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001312:	2302      	movs	r3, #2
 8001314:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001318:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800131c:	fa93 f3a3 	rbit	r3, r3
 8001320:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001324:	4b25      	ldr	r3, [pc, #148]	; (80013bc <HAL_RCC_OscConfig+0x63c>)
 8001326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001328:	2202      	movs	r2, #2
 800132a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800132e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001332:	fa92 f2a2 	rbit	r2, r2
 8001336:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800133a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800133e:	fab2 f282 	clz	r2, r2
 8001342:	b2d2      	uxtb	r2, r2
 8001344:	f042 0220 	orr.w	r2, r2, #32
 8001348:	b2d2      	uxtb	r2, r2
 800134a:	f002 021f 	and.w	r2, r2, #31
 800134e:	2101      	movs	r1, #1
 8001350:	fa01 f202 	lsl.w	r2, r1, r2
 8001354:	4013      	ands	r3, r2
 8001356:	2b00      	cmp	r3, #0
 8001358:	d1af      	bne.n	80012ba <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800135a:	1d3b      	adds	r3, r7, #4
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f003 0308 	and.w	r3, r3, #8
 8001364:	2b00      	cmp	r3, #0
 8001366:	f000 80da 	beq.w	800151e <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800136a:	1d3b      	adds	r3, r7, #4
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	695b      	ldr	r3, [r3, #20]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d069      	beq.n	8001448 <HAL_RCC_OscConfig+0x6c8>
 8001374:	2301      	movs	r3, #1
 8001376:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800137a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800137e:	fa93 f3a3 	rbit	r3, r3
 8001382:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001386:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800138a:	fab3 f383 	clz	r3, r3
 800138e:	b2db      	uxtb	r3, r3
 8001390:	461a      	mov	r2, r3
 8001392:	4b0b      	ldr	r3, [pc, #44]	; (80013c0 <HAL_RCC_OscConfig+0x640>)
 8001394:	4413      	add	r3, r2
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	461a      	mov	r2, r3
 800139a:	2301      	movs	r3, #1
 800139c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800139e:	f7ff f99f 	bl	80006e0 <HAL_GetTick>
 80013a2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013a6:	e00d      	b.n	80013c4 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013a8:	f7ff f99a 	bl	80006e0 <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d905      	bls.n	80013c4 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 80013b8:	2303      	movs	r3, #3
 80013ba:	e3ef      	b.n	8001b9c <HAL_RCC_OscConfig+0xe1c>
 80013bc:	40021000 	.word	0x40021000
 80013c0:	10908120 	.word	0x10908120
 80013c4:	2302      	movs	r3, #2
 80013c6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80013ce:	fa93 f2a3 	rbit	r2, r3
 80013d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80013dc:	2202      	movs	r2, #2
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	fa93 f2a3 	rbit	r2, r3
 80013ea:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80013f4:	2202      	movs	r2, #2
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	fa93 f2a3 	rbit	r2, r3
 8001402:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001406:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001408:	4ba4      	ldr	r3, [pc, #656]	; (800169c <HAL_RCC_OscConfig+0x91c>)
 800140a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800140c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001410:	2102      	movs	r1, #2
 8001412:	6019      	str	r1, [r3, #0]
 8001414:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	fa93 f1a3 	rbit	r1, r3
 800141e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001422:	6019      	str	r1, [r3, #0]
  return result;
 8001424:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	fab3 f383 	clz	r3, r3
 800142e:	b2db      	uxtb	r3, r3
 8001430:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001434:	b2db      	uxtb	r3, r3
 8001436:	f003 031f 	and.w	r3, r3, #31
 800143a:	2101      	movs	r1, #1
 800143c:	fa01 f303 	lsl.w	r3, r1, r3
 8001440:	4013      	ands	r3, r2
 8001442:	2b00      	cmp	r3, #0
 8001444:	d0b0      	beq.n	80013a8 <HAL_RCC_OscConfig+0x628>
 8001446:	e06a      	b.n	800151e <HAL_RCC_OscConfig+0x79e>
 8001448:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800144c:	2201      	movs	r2, #1
 800144e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001450:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	fa93 f2a3 	rbit	r2, r3
 800145a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800145e:	601a      	str	r2, [r3, #0]
  return result;
 8001460:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001464:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001466:	fab3 f383 	clz	r3, r3
 800146a:	b2db      	uxtb	r3, r3
 800146c:	461a      	mov	r2, r3
 800146e:	4b8c      	ldr	r3, [pc, #560]	; (80016a0 <HAL_RCC_OscConfig+0x920>)
 8001470:	4413      	add	r3, r2
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	461a      	mov	r2, r3
 8001476:	2300      	movs	r3, #0
 8001478:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800147a:	f7ff f931 	bl	80006e0 <HAL_GetTick>
 800147e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001482:	e009      	b.n	8001498 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001484:	f7ff f92c 	bl	80006e0 <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	2b02      	cmp	r3, #2
 8001492:	d901      	bls.n	8001498 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8001494:	2303      	movs	r3, #3
 8001496:	e381      	b.n	8001b9c <HAL_RCC_OscConfig+0xe1c>
 8001498:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800149c:	2202      	movs	r2, #2
 800149e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014a0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	fa93 f2a3 	rbit	r2, r3
 80014aa:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80014b4:	2202      	movs	r2, #2
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	fa93 f2a3 	rbit	r2, r3
 80014c2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80014cc:	2202      	movs	r2, #2
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	fa93 f2a3 	rbit	r2, r3
 80014da:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80014de:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014e0:	4b6e      	ldr	r3, [pc, #440]	; (800169c <HAL_RCC_OscConfig+0x91c>)
 80014e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014e4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80014e8:	2102      	movs	r1, #2
 80014ea:	6019      	str	r1, [r3, #0]
 80014ec:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	fa93 f1a3 	rbit	r1, r3
 80014f6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80014fa:	6019      	str	r1, [r3, #0]
  return result;
 80014fc:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	fab3 f383 	clz	r3, r3
 8001506:	b2db      	uxtb	r3, r3
 8001508:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800150c:	b2db      	uxtb	r3, r3
 800150e:	f003 031f 	and.w	r3, r3, #31
 8001512:	2101      	movs	r1, #1
 8001514:	fa01 f303 	lsl.w	r3, r1, r3
 8001518:	4013      	ands	r3, r2
 800151a:	2b00      	cmp	r3, #0
 800151c:	d1b2      	bne.n	8001484 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800151e:	1d3b      	adds	r3, r7, #4
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 0304 	and.w	r3, r3, #4
 8001528:	2b00      	cmp	r3, #0
 800152a:	f000 8157 	beq.w	80017dc <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800152e:	2300      	movs	r3, #0
 8001530:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001534:	4b59      	ldr	r3, [pc, #356]	; (800169c <HAL_RCC_OscConfig+0x91c>)
 8001536:	69db      	ldr	r3, [r3, #28]
 8001538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153c:	2b00      	cmp	r3, #0
 800153e:	d112      	bne.n	8001566 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001540:	4b56      	ldr	r3, [pc, #344]	; (800169c <HAL_RCC_OscConfig+0x91c>)
 8001542:	69db      	ldr	r3, [r3, #28]
 8001544:	4a55      	ldr	r2, [pc, #340]	; (800169c <HAL_RCC_OscConfig+0x91c>)
 8001546:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800154a:	61d3      	str	r3, [r2, #28]
 800154c:	4b53      	ldr	r3, [pc, #332]	; (800169c <HAL_RCC_OscConfig+0x91c>)
 800154e:	69db      	ldr	r3, [r3, #28]
 8001550:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001554:	f107 030c 	add.w	r3, r7, #12
 8001558:	601a      	str	r2, [r3, #0]
 800155a:	f107 030c 	add.w	r3, r7, #12
 800155e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001560:	2301      	movs	r3, #1
 8001562:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001566:	4b4f      	ldr	r3, [pc, #316]	; (80016a4 <HAL_RCC_OscConfig+0x924>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800156e:	2b00      	cmp	r3, #0
 8001570:	d11a      	bne.n	80015a8 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001572:	4b4c      	ldr	r3, [pc, #304]	; (80016a4 <HAL_RCC_OscConfig+0x924>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a4b      	ldr	r2, [pc, #300]	; (80016a4 <HAL_RCC_OscConfig+0x924>)
 8001578:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800157c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800157e:	f7ff f8af 	bl	80006e0 <HAL_GetTick>
 8001582:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001586:	e009      	b.n	800159c <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001588:	f7ff f8aa 	bl	80006e0 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	2b64      	cmp	r3, #100	; 0x64
 8001596:	d901      	bls.n	800159c <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e2ff      	b.n	8001b9c <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800159c:	4b41      	ldr	r3, [pc, #260]	; (80016a4 <HAL_RCC_OscConfig+0x924>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d0ef      	beq.n	8001588 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015a8:	1d3b      	adds	r3, r7, #4
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d106      	bne.n	80015c0 <HAL_RCC_OscConfig+0x840>
 80015b2:	4b3a      	ldr	r3, [pc, #232]	; (800169c <HAL_RCC_OscConfig+0x91c>)
 80015b4:	6a1b      	ldr	r3, [r3, #32]
 80015b6:	4a39      	ldr	r2, [pc, #228]	; (800169c <HAL_RCC_OscConfig+0x91c>)
 80015b8:	f043 0301 	orr.w	r3, r3, #1
 80015bc:	6213      	str	r3, [r2, #32]
 80015be:	e02f      	b.n	8001620 <HAL_RCC_OscConfig+0x8a0>
 80015c0:	1d3b      	adds	r3, r7, #4
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d10c      	bne.n	80015e4 <HAL_RCC_OscConfig+0x864>
 80015ca:	4b34      	ldr	r3, [pc, #208]	; (800169c <HAL_RCC_OscConfig+0x91c>)
 80015cc:	6a1b      	ldr	r3, [r3, #32]
 80015ce:	4a33      	ldr	r2, [pc, #204]	; (800169c <HAL_RCC_OscConfig+0x91c>)
 80015d0:	f023 0301 	bic.w	r3, r3, #1
 80015d4:	6213      	str	r3, [r2, #32]
 80015d6:	4b31      	ldr	r3, [pc, #196]	; (800169c <HAL_RCC_OscConfig+0x91c>)
 80015d8:	6a1b      	ldr	r3, [r3, #32]
 80015da:	4a30      	ldr	r2, [pc, #192]	; (800169c <HAL_RCC_OscConfig+0x91c>)
 80015dc:	f023 0304 	bic.w	r3, r3, #4
 80015e0:	6213      	str	r3, [r2, #32]
 80015e2:	e01d      	b.n	8001620 <HAL_RCC_OscConfig+0x8a0>
 80015e4:	1d3b      	adds	r3, r7, #4
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	2b05      	cmp	r3, #5
 80015ec:	d10c      	bne.n	8001608 <HAL_RCC_OscConfig+0x888>
 80015ee:	4b2b      	ldr	r3, [pc, #172]	; (800169c <HAL_RCC_OscConfig+0x91c>)
 80015f0:	6a1b      	ldr	r3, [r3, #32]
 80015f2:	4a2a      	ldr	r2, [pc, #168]	; (800169c <HAL_RCC_OscConfig+0x91c>)
 80015f4:	f043 0304 	orr.w	r3, r3, #4
 80015f8:	6213      	str	r3, [r2, #32]
 80015fa:	4b28      	ldr	r3, [pc, #160]	; (800169c <HAL_RCC_OscConfig+0x91c>)
 80015fc:	6a1b      	ldr	r3, [r3, #32]
 80015fe:	4a27      	ldr	r2, [pc, #156]	; (800169c <HAL_RCC_OscConfig+0x91c>)
 8001600:	f043 0301 	orr.w	r3, r3, #1
 8001604:	6213      	str	r3, [r2, #32]
 8001606:	e00b      	b.n	8001620 <HAL_RCC_OscConfig+0x8a0>
 8001608:	4b24      	ldr	r3, [pc, #144]	; (800169c <HAL_RCC_OscConfig+0x91c>)
 800160a:	6a1b      	ldr	r3, [r3, #32]
 800160c:	4a23      	ldr	r2, [pc, #140]	; (800169c <HAL_RCC_OscConfig+0x91c>)
 800160e:	f023 0301 	bic.w	r3, r3, #1
 8001612:	6213      	str	r3, [r2, #32]
 8001614:	4b21      	ldr	r3, [pc, #132]	; (800169c <HAL_RCC_OscConfig+0x91c>)
 8001616:	6a1b      	ldr	r3, [r3, #32]
 8001618:	4a20      	ldr	r2, [pc, #128]	; (800169c <HAL_RCC_OscConfig+0x91c>)
 800161a:	f023 0304 	bic.w	r3, r3, #4
 800161e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001620:	1d3b      	adds	r3, r7, #4
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d06a      	beq.n	8001700 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800162a:	f7ff f859 	bl	80006e0 <HAL_GetTick>
 800162e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001632:	e00b      	b.n	800164c <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001634:	f7ff f854 	bl	80006e0 <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	f241 3288 	movw	r2, #5000	; 0x1388
 8001644:	4293      	cmp	r3, r2
 8001646:	d901      	bls.n	800164c <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8001648:	2303      	movs	r3, #3
 800164a:	e2a7      	b.n	8001b9c <HAL_RCC_OscConfig+0xe1c>
 800164c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001650:	2202      	movs	r2, #2
 8001652:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001654:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	fa93 f2a3 	rbit	r2, r3
 800165e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001668:	2202      	movs	r2, #2
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	fa93 f2a3 	rbit	r2, r3
 8001676:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800167a:	601a      	str	r2, [r3, #0]
  return result;
 800167c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001680:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001682:	fab3 f383 	clz	r3, r3
 8001686:	b2db      	uxtb	r3, r3
 8001688:	095b      	lsrs	r3, r3, #5
 800168a:	b2db      	uxtb	r3, r3
 800168c:	f043 0302 	orr.w	r3, r3, #2
 8001690:	b2db      	uxtb	r3, r3
 8001692:	2b02      	cmp	r3, #2
 8001694:	d108      	bne.n	80016a8 <HAL_RCC_OscConfig+0x928>
 8001696:	4b01      	ldr	r3, [pc, #4]	; (800169c <HAL_RCC_OscConfig+0x91c>)
 8001698:	6a1b      	ldr	r3, [r3, #32]
 800169a:	e013      	b.n	80016c4 <HAL_RCC_OscConfig+0x944>
 800169c:	40021000 	.word	0x40021000
 80016a0:	10908120 	.word	0x10908120
 80016a4:	40007000 	.word	0x40007000
 80016a8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80016ac:	2202      	movs	r2, #2
 80016ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016b0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	fa93 f2a3 	rbit	r2, r3
 80016ba:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	4bc0      	ldr	r3, [pc, #768]	; (80019c4 <HAL_RCC_OscConfig+0xc44>)
 80016c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80016c8:	2102      	movs	r1, #2
 80016ca:	6011      	str	r1, [r2, #0]
 80016cc:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80016d0:	6812      	ldr	r2, [r2, #0]
 80016d2:	fa92 f1a2 	rbit	r1, r2
 80016d6:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80016da:	6011      	str	r1, [r2, #0]
  return result;
 80016dc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80016e0:	6812      	ldr	r2, [r2, #0]
 80016e2:	fab2 f282 	clz	r2, r2
 80016e6:	b2d2      	uxtb	r2, r2
 80016e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80016ec:	b2d2      	uxtb	r2, r2
 80016ee:	f002 021f 	and.w	r2, r2, #31
 80016f2:	2101      	movs	r1, #1
 80016f4:	fa01 f202 	lsl.w	r2, r1, r2
 80016f8:	4013      	ands	r3, r2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d09a      	beq.n	8001634 <HAL_RCC_OscConfig+0x8b4>
 80016fe:	e063      	b.n	80017c8 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001700:	f7fe ffee 	bl	80006e0 <HAL_GetTick>
 8001704:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001708:	e00b      	b.n	8001722 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800170a:	f7fe ffe9 	bl	80006e0 <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	f241 3288 	movw	r2, #5000	; 0x1388
 800171a:	4293      	cmp	r3, r2
 800171c:	d901      	bls.n	8001722 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 800171e:	2303      	movs	r3, #3
 8001720:	e23c      	b.n	8001b9c <HAL_RCC_OscConfig+0xe1c>
 8001722:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001726:	2202      	movs	r2, #2
 8001728:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800172a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	fa93 f2a3 	rbit	r2, r3
 8001734:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001738:	601a      	str	r2, [r3, #0]
 800173a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800173e:	2202      	movs	r2, #2
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	fa93 f2a3 	rbit	r2, r3
 800174c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001750:	601a      	str	r2, [r3, #0]
  return result;
 8001752:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001756:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001758:	fab3 f383 	clz	r3, r3
 800175c:	b2db      	uxtb	r3, r3
 800175e:	095b      	lsrs	r3, r3, #5
 8001760:	b2db      	uxtb	r3, r3
 8001762:	f043 0302 	orr.w	r3, r3, #2
 8001766:	b2db      	uxtb	r3, r3
 8001768:	2b02      	cmp	r3, #2
 800176a:	d102      	bne.n	8001772 <HAL_RCC_OscConfig+0x9f2>
 800176c:	4b95      	ldr	r3, [pc, #596]	; (80019c4 <HAL_RCC_OscConfig+0xc44>)
 800176e:	6a1b      	ldr	r3, [r3, #32]
 8001770:	e00d      	b.n	800178e <HAL_RCC_OscConfig+0xa0e>
 8001772:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001776:	2202      	movs	r2, #2
 8001778:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800177a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	fa93 f2a3 	rbit	r2, r3
 8001784:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	4b8e      	ldr	r3, [pc, #568]	; (80019c4 <HAL_RCC_OscConfig+0xc44>)
 800178c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001792:	2102      	movs	r1, #2
 8001794:	6011      	str	r1, [r2, #0]
 8001796:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800179a:	6812      	ldr	r2, [r2, #0]
 800179c:	fa92 f1a2 	rbit	r1, r2
 80017a0:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80017a4:	6011      	str	r1, [r2, #0]
  return result;
 80017a6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80017aa:	6812      	ldr	r2, [r2, #0]
 80017ac:	fab2 f282 	clz	r2, r2
 80017b0:	b2d2      	uxtb	r2, r2
 80017b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017b6:	b2d2      	uxtb	r2, r2
 80017b8:	f002 021f 	and.w	r2, r2, #31
 80017bc:	2101      	movs	r1, #1
 80017be:	fa01 f202 	lsl.w	r2, r1, r2
 80017c2:	4013      	ands	r3, r2
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d1a0      	bne.n	800170a <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80017c8:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d105      	bne.n	80017dc <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017d0:	4b7c      	ldr	r3, [pc, #496]	; (80019c4 <HAL_RCC_OscConfig+0xc44>)
 80017d2:	69db      	ldr	r3, [r3, #28]
 80017d4:	4a7b      	ldr	r2, [pc, #492]	; (80019c4 <HAL_RCC_OscConfig+0xc44>)
 80017d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017da:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017dc:	1d3b      	adds	r3, r7, #4
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	699b      	ldr	r3, [r3, #24]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	f000 81d9 	beq.w	8001b9a <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017e8:	4b76      	ldr	r3, [pc, #472]	; (80019c4 <HAL_RCC_OscConfig+0xc44>)
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f003 030c 	and.w	r3, r3, #12
 80017f0:	2b08      	cmp	r3, #8
 80017f2:	f000 81a6 	beq.w	8001b42 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017f6:	1d3b      	adds	r3, r7, #4
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	699b      	ldr	r3, [r3, #24]
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	f040 811e 	bne.w	8001a3e <HAL_RCC_OscConfig+0xcbe>
 8001802:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001806:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800180a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800180c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	fa93 f2a3 	rbit	r2, r3
 8001816:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800181a:	601a      	str	r2, [r3, #0]
  return result;
 800181c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001820:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001822:	fab3 f383 	clz	r3, r3
 8001826:	b2db      	uxtb	r3, r3
 8001828:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800182c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	461a      	mov	r2, r3
 8001834:	2300      	movs	r3, #0
 8001836:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001838:	f7fe ff52 	bl	80006e0 <HAL_GetTick>
 800183c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001840:	e009      	b.n	8001856 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001842:	f7fe ff4d 	bl	80006e0 <HAL_GetTick>
 8001846:	4602      	mov	r2, r0
 8001848:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	2b02      	cmp	r3, #2
 8001850:	d901      	bls.n	8001856 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e1a2      	b.n	8001b9c <HAL_RCC_OscConfig+0xe1c>
 8001856:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800185a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800185e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001860:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	fa93 f2a3 	rbit	r2, r3
 800186a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800186e:	601a      	str	r2, [r3, #0]
  return result;
 8001870:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001874:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001876:	fab3 f383 	clz	r3, r3
 800187a:	b2db      	uxtb	r3, r3
 800187c:	095b      	lsrs	r3, r3, #5
 800187e:	b2db      	uxtb	r3, r3
 8001880:	f043 0301 	orr.w	r3, r3, #1
 8001884:	b2db      	uxtb	r3, r3
 8001886:	2b01      	cmp	r3, #1
 8001888:	d102      	bne.n	8001890 <HAL_RCC_OscConfig+0xb10>
 800188a:	4b4e      	ldr	r3, [pc, #312]	; (80019c4 <HAL_RCC_OscConfig+0xc44>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	e01b      	b.n	80018c8 <HAL_RCC_OscConfig+0xb48>
 8001890:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001894:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001898:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800189a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	fa93 f2a3 	rbit	r2, r3
 80018a4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80018a8:	601a      	str	r2, [r3, #0]
 80018aa:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80018ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	fa93 f2a3 	rbit	r2, r3
 80018be:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	4b3f      	ldr	r3, [pc, #252]	; (80019c4 <HAL_RCC_OscConfig+0xc44>)
 80018c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c8:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80018cc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80018d0:	6011      	str	r1, [r2, #0]
 80018d2:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80018d6:	6812      	ldr	r2, [r2, #0]
 80018d8:	fa92 f1a2 	rbit	r1, r2
 80018dc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80018e0:	6011      	str	r1, [r2, #0]
  return result;
 80018e2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80018e6:	6812      	ldr	r2, [r2, #0]
 80018e8:	fab2 f282 	clz	r2, r2
 80018ec:	b2d2      	uxtb	r2, r2
 80018ee:	f042 0220 	orr.w	r2, r2, #32
 80018f2:	b2d2      	uxtb	r2, r2
 80018f4:	f002 021f 	and.w	r2, r2, #31
 80018f8:	2101      	movs	r1, #1
 80018fa:	fa01 f202 	lsl.w	r2, r1, r2
 80018fe:	4013      	ands	r3, r2
 8001900:	2b00      	cmp	r3, #0
 8001902:	d19e      	bne.n	8001842 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001904:	4b2f      	ldr	r3, [pc, #188]	; (80019c4 <HAL_RCC_OscConfig+0xc44>)
 8001906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001908:	f023 020f 	bic.w	r2, r3, #15
 800190c:	1d3b      	adds	r3, r7, #4
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001912:	492c      	ldr	r1, [pc, #176]	; (80019c4 <HAL_RCC_OscConfig+0xc44>)
 8001914:	4313      	orrs	r3, r2
 8001916:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001918:	4b2a      	ldr	r3, [pc, #168]	; (80019c4 <HAL_RCC_OscConfig+0xc44>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001920:	1d3b      	adds	r3, r7, #4
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	6a19      	ldr	r1, [r3, #32]
 8001926:	1d3b      	adds	r3, r7, #4
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	69db      	ldr	r3, [r3, #28]
 800192c:	430b      	orrs	r3, r1
 800192e:	4925      	ldr	r1, [pc, #148]	; (80019c4 <HAL_RCC_OscConfig+0xc44>)
 8001930:	4313      	orrs	r3, r2
 8001932:	604b      	str	r3, [r1, #4]
 8001934:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001938:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800193c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800193e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	fa93 f2a3 	rbit	r2, r3
 8001948:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800194c:	601a      	str	r2, [r3, #0]
  return result;
 800194e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001952:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001954:	fab3 f383 	clz	r3, r3
 8001958:	b2db      	uxtb	r3, r3
 800195a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800195e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	461a      	mov	r2, r3
 8001966:	2301      	movs	r3, #1
 8001968:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800196a:	f7fe feb9 	bl	80006e0 <HAL_GetTick>
 800196e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001972:	e009      	b.n	8001988 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001974:	f7fe feb4 	bl	80006e0 <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	2b02      	cmp	r3, #2
 8001982:	d901      	bls.n	8001988 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001984:	2303      	movs	r3, #3
 8001986:	e109      	b.n	8001b9c <HAL_RCC_OscConfig+0xe1c>
 8001988:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800198c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001990:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001992:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	fa93 f2a3 	rbit	r2, r3
 800199c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80019a0:	601a      	str	r2, [r3, #0]
  return result;
 80019a2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80019a6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019a8:	fab3 f383 	clz	r3, r3
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	095b      	lsrs	r3, r3, #5
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	f043 0301 	orr.w	r3, r3, #1
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d105      	bne.n	80019c8 <HAL_RCC_OscConfig+0xc48>
 80019bc:	4b01      	ldr	r3, [pc, #4]	; (80019c4 <HAL_RCC_OscConfig+0xc44>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	e01e      	b.n	8001a00 <HAL_RCC_OscConfig+0xc80>
 80019c2:	bf00      	nop
 80019c4:	40021000 	.word	0x40021000
 80019c8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80019cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	fa93 f2a3 	rbit	r2, r3
 80019dc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80019e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	fa93 f2a3 	rbit	r2, r3
 80019f6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	4b6a      	ldr	r3, [pc, #424]	; (8001ba8 <HAL_RCC_OscConfig+0xe28>)
 80019fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a00:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001a04:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a08:	6011      	str	r1, [r2, #0]
 8001a0a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001a0e:	6812      	ldr	r2, [r2, #0]
 8001a10:	fa92 f1a2 	rbit	r1, r2
 8001a14:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001a18:	6011      	str	r1, [r2, #0]
  return result;
 8001a1a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001a1e:	6812      	ldr	r2, [r2, #0]
 8001a20:	fab2 f282 	clz	r2, r2
 8001a24:	b2d2      	uxtb	r2, r2
 8001a26:	f042 0220 	orr.w	r2, r2, #32
 8001a2a:	b2d2      	uxtb	r2, r2
 8001a2c:	f002 021f 	and.w	r2, r2, #31
 8001a30:	2101      	movs	r1, #1
 8001a32:	fa01 f202 	lsl.w	r2, r1, r2
 8001a36:	4013      	ands	r3, r2
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d09b      	beq.n	8001974 <HAL_RCC_OscConfig+0xbf4>
 8001a3c:	e0ad      	b.n	8001b9a <HAL_RCC_OscConfig+0xe1a>
 8001a3e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a42:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a48:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	fa93 f2a3 	rbit	r2, r3
 8001a52:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a56:	601a      	str	r2, [r3, #0]
  return result;
 8001a58:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a5c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a5e:	fab3 f383 	clz	r3, r3
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a68:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	461a      	mov	r2, r3
 8001a70:	2300      	movs	r3, #0
 8001a72:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a74:	f7fe fe34 	bl	80006e0 <HAL_GetTick>
 8001a78:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a7c:	e009      	b.n	8001a92 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a7e:	f7fe fe2f 	bl	80006e0 <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e084      	b.n	8001b9c <HAL_RCC_OscConfig+0xe1c>
 8001a92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a96:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	fa93 f2a3 	rbit	r2, r3
 8001aa6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001aaa:	601a      	str	r2, [r3, #0]
  return result;
 8001aac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ab0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ab2:	fab3 f383 	clz	r3, r3
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	095b      	lsrs	r3, r3, #5
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	f043 0301 	orr.w	r3, r3, #1
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d102      	bne.n	8001acc <HAL_RCC_OscConfig+0xd4c>
 8001ac6:	4b38      	ldr	r3, [pc, #224]	; (8001ba8 <HAL_RCC_OscConfig+0xe28>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	e01b      	b.n	8001b04 <HAL_RCC_OscConfig+0xd84>
 8001acc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ad0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ad4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	fa93 f2a3 	rbit	r2, r3
 8001ae0:	f107 0320 	add.w	r3, r7, #32
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	f107 031c 	add.w	r3, r7, #28
 8001aea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	f107 031c 	add.w	r3, r7, #28
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	fa93 f2a3 	rbit	r2, r3
 8001afa:	f107 0318 	add.w	r3, r7, #24
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	4b29      	ldr	r3, [pc, #164]	; (8001ba8 <HAL_RCC_OscConfig+0xe28>)
 8001b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b04:	f107 0214 	add.w	r2, r7, #20
 8001b08:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b0c:	6011      	str	r1, [r2, #0]
 8001b0e:	f107 0214 	add.w	r2, r7, #20
 8001b12:	6812      	ldr	r2, [r2, #0]
 8001b14:	fa92 f1a2 	rbit	r1, r2
 8001b18:	f107 0210 	add.w	r2, r7, #16
 8001b1c:	6011      	str	r1, [r2, #0]
  return result;
 8001b1e:	f107 0210 	add.w	r2, r7, #16
 8001b22:	6812      	ldr	r2, [r2, #0]
 8001b24:	fab2 f282 	clz	r2, r2
 8001b28:	b2d2      	uxtb	r2, r2
 8001b2a:	f042 0220 	orr.w	r2, r2, #32
 8001b2e:	b2d2      	uxtb	r2, r2
 8001b30:	f002 021f 	and.w	r2, r2, #31
 8001b34:	2101      	movs	r1, #1
 8001b36:	fa01 f202 	lsl.w	r2, r1, r2
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d19e      	bne.n	8001a7e <HAL_RCC_OscConfig+0xcfe>
 8001b40:	e02b      	b.n	8001b9a <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b42:	1d3b      	adds	r3, r7, #4
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d101      	bne.n	8001b50 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e025      	b.n	8001b9c <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b50:	4b15      	ldr	r3, [pc, #84]	; (8001ba8 <HAL_RCC_OscConfig+0xe28>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001b58:	4b13      	ldr	r3, [pc, #76]	; (8001ba8 <HAL_RCC_OscConfig+0xe28>)
 8001b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b5c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001b60:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001b64:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001b68:	1d3b      	adds	r3, r7, #4
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	69db      	ldr	r3, [r3, #28]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d111      	bne.n	8001b96 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001b72:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001b76:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b7a:	1d3b      	adds	r3, r7, #4
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d108      	bne.n	8001b96 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001b84:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b88:	f003 020f 	and.w	r2, r3, #15
 8001b8c:	1d3b      	adds	r3, r7, #4
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d001      	beq.n	8001b9a <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e000      	b.n	8001b9c <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8001b9a:	2300      	movs	r3, #0
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	40021000 	.word	0x40021000

08001bac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b09e      	sub	sp, #120	; 0x78
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d101      	bne.n	8001bc4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e162      	b.n	8001e8a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bc4:	4b90      	ldr	r3, [pc, #576]	; (8001e08 <HAL_RCC_ClockConfig+0x25c>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0307 	and.w	r3, r3, #7
 8001bcc:	683a      	ldr	r2, [r7, #0]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d910      	bls.n	8001bf4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bd2:	4b8d      	ldr	r3, [pc, #564]	; (8001e08 <HAL_RCC_ClockConfig+0x25c>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f023 0207 	bic.w	r2, r3, #7
 8001bda:	498b      	ldr	r1, [pc, #556]	; (8001e08 <HAL_RCC_ClockConfig+0x25c>)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001be2:	4b89      	ldr	r3, [pc, #548]	; (8001e08 <HAL_RCC_ClockConfig+0x25c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0307 	and.w	r3, r3, #7
 8001bea:	683a      	ldr	r2, [r7, #0]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d001      	beq.n	8001bf4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e14a      	b.n	8001e8a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0302 	and.w	r3, r3, #2
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d008      	beq.n	8001c12 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c00:	4b82      	ldr	r3, [pc, #520]	; (8001e0c <HAL_RCC_ClockConfig+0x260>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	497f      	ldr	r1, [pc, #508]	; (8001e0c <HAL_RCC_ClockConfig+0x260>)
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	f000 80dc 	beq.w	8001dd8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d13c      	bne.n	8001ca2 <HAL_RCC_ClockConfig+0xf6>
 8001c28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c2c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c30:	fa93 f3a3 	rbit	r3, r3
 8001c34:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001c36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c38:	fab3 f383 	clz	r3, r3
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	095b      	lsrs	r3, r3, #5
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	f043 0301 	orr.w	r3, r3, #1
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d102      	bne.n	8001c52 <HAL_RCC_ClockConfig+0xa6>
 8001c4c:	4b6f      	ldr	r3, [pc, #444]	; (8001e0c <HAL_RCC_ClockConfig+0x260>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	e00f      	b.n	8001c72 <HAL_RCC_ClockConfig+0xc6>
 8001c52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c56:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c5a:	fa93 f3a3 	rbit	r3, r3
 8001c5e:	667b      	str	r3, [r7, #100]	; 0x64
 8001c60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c64:	663b      	str	r3, [r7, #96]	; 0x60
 8001c66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c68:	fa93 f3a3 	rbit	r3, r3
 8001c6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001c6e:	4b67      	ldr	r3, [pc, #412]	; (8001e0c <HAL_RCC_ClockConfig+0x260>)
 8001c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c72:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c76:	65ba      	str	r2, [r7, #88]	; 0x58
 8001c78:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001c7a:	fa92 f2a2 	rbit	r2, r2
 8001c7e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001c80:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001c82:	fab2 f282 	clz	r2, r2
 8001c86:	b2d2      	uxtb	r2, r2
 8001c88:	f042 0220 	orr.w	r2, r2, #32
 8001c8c:	b2d2      	uxtb	r2, r2
 8001c8e:	f002 021f 	and.w	r2, r2, #31
 8001c92:	2101      	movs	r1, #1
 8001c94:	fa01 f202 	lsl.w	r2, r1, r2
 8001c98:	4013      	ands	r3, r2
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d17b      	bne.n	8001d96 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e0f3      	b.n	8001e8a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d13c      	bne.n	8001d24 <HAL_RCC_ClockConfig+0x178>
 8001caa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cae:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001cb2:	fa93 f3a3 	rbit	r3, r3
 8001cb6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001cb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cba:	fab3 f383 	clz	r3, r3
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	095b      	lsrs	r3, r3, #5
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	f043 0301 	orr.w	r3, r3, #1
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d102      	bne.n	8001cd4 <HAL_RCC_ClockConfig+0x128>
 8001cce:	4b4f      	ldr	r3, [pc, #316]	; (8001e0c <HAL_RCC_ClockConfig+0x260>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	e00f      	b.n	8001cf4 <HAL_RCC_ClockConfig+0x148>
 8001cd4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cd8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001cdc:	fa93 f3a3 	rbit	r3, r3
 8001ce0:	647b      	str	r3, [r7, #68]	; 0x44
 8001ce2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ce6:	643b      	str	r3, [r7, #64]	; 0x40
 8001ce8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cea:	fa93 f3a3 	rbit	r3, r3
 8001cee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001cf0:	4b46      	ldr	r3, [pc, #280]	; (8001e0c <HAL_RCC_ClockConfig+0x260>)
 8001cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cf8:	63ba      	str	r2, [r7, #56]	; 0x38
 8001cfa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001cfc:	fa92 f2a2 	rbit	r2, r2
 8001d00:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001d02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d04:	fab2 f282 	clz	r2, r2
 8001d08:	b2d2      	uxtb	r2, r2
 8001d0a:	f042 0220 	orr.w	r2, r2, #32
 8001d0e:	b2d2      	uxtb	r2, r2
 8001d10:	f002 021f 	and.w	r2, r2, #31
 8001d14:	2101      	movs	r1, #1
 8001d16:	fa01 f202 	lsl.w	r2, r1, r2
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d13a      	bne.n	8001d96 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e0b2      	b.n	8001e8a <HAL_RCC_ClockConfig+0x2de>
 8001d24:	2302      	movs	r3, #2
 8001d26:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d2a:	fa93 f3a3 	rbit	r3, r3
 8001d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d32:	fab3 f383 	clz	r3, r3
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	095b      	lsrs	r3, r3, #5
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	f043 0301 	orr.w	r3, r3, #1
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d102      	bne.n	8001d4c <HAL_RCC_ClockConfig+0x1a0>
 8001d46:	4b31      	ldr	r3, [pc, #196]	; (8001e0c <HAL_RCC_ClockConfig+0x260>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	e00d      	b.n	8001d68 <HAL_RCC_ClockConfig+0x1bc>
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d52:	fa93 f3a3 	rbit	r3, r3
 8001d56:	627b      	str	r3, [r7, #36]	; 0x24
 8001d58:	2302      	movs	r3, #2
 8001d5a:	623b      	str	r3, [r7, #32]
 8001d5c:	6a3b      	ldr	r3, [r7, #32]
 8001d5e:	fa93 f3a3 	rbit	r3, r3
 8001d62:	61fb      	str	r3, [r7, #28]
 8001d64:	4b29      	ldr	r3, [pc, #164]	; (8001e0c <HAL_RCC_ClockConfig+0x260>)
 8001d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d68:	2202      	movs	r2, #2
 8001d6a:	61ba      	str	r2, [r7, #24]
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	fa92 f2a2 	rbit	r2, r2
 8001d72:	617a      	str	r2, [r7, #20]
  return result;
 8001d74:	697a      	ldr	r2, [r7, #20]
 8001d76:	fab2 f282 	clz	r2, r2
 8001d7a:	b2d2      	uxtb	r2, r2
 8001d7c:	f042 0220 	orr.w	r2, r2, #32
 8001d80:	b2d2      	uxtb	r2, r2
 8001d82:	f002 021f 	and.w	r2, r2, #31
 8001d86:	2101      	movs	r1, #1
 8001d88:	fa01 f202 	lsl.w	r2, r1, r2
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d101      	bne.n	8001d96 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e079      	b.n	8001e8a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d96:	4b1d      	ldr	r3, [pc, #116]	; (8001e0c <HAL_RCC_ClockConfig+0x260>)
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f023 0203 	bic.w	r2, r3, #3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	491a      	ldr	r1, [pc, #104]	; (8001e0c <HAL_RCC_ClockConfig+0x260>)
 8001da4:	4313      	orrs	r3, r2
 8001da6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001da8:	f7fe fc9a 	bl	80006e0 <HAL_GetTick>
 8001dac:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dae:	e00a      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001db0:	f7fe fc96 	bl	80006e0 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e061      	b.n	8001e8a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dc6:	4b11      	ldr	r3, [pc, #68]	; (8001e0c <HAL_RCC_ClockConfig+0x260>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f003 020c 	and.w	r2, r3, #12
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d1eb      	bne.n	8001db0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001dd8:	4b0b      	ldr	r3, [pc, #44]	; (8001e08 <HAL_RCC_ClockConfig+0x25c>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0307 	and.w	r3, r3, #7
 8001de0:	683a      	ldr	r2, [r7, #0]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d214      	bcs.n	8001e10 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001de6:	4b08      	ldr	r3, [pc, #32]	; (8001e08 <HAL_RCC_ClockConfig+0x25c>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f023 0207 	bic.w	r2, r3, #7
 8001dee:	4906      	ldr	r1, [pc, #24]	; (8001e08 <HAL_RCC_ClockConfig+0x25c>)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001df6:	4b04      	ldr	r3, [pc, #16]	; (8001e08 <HAL_RCC_ClockConfig+0x25c>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0307 	and.w	r3, r3, #7
 8001dfe:	683a      	ldr	r2, [r7, #0]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d005      	beq.n	8001e10 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e040      	b.n	8001e8a <HAL_RCC_ClockConfig+0x2de>
 8001e08:	40022000 	.word	0x40022000
 8001e0c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0304 	and.w	r3, r3, #4
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d008      	beq.n	8001e2e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e1c:	4b1d      	ldr	r3, [pc, #116]	; (8001e94 <HAL_RCC_ClockConfig+0x2e8>)
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	491a      	ldr	r1, [pc, #104]	; (8001e94 <HAL_RCC_ClockConfig+0x2e8>)
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0308 	and.w	r3, r3, #8
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d009      	beq.n	8001e4e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e3a:	4b16      	ldr	r3, [pc, #88]	; (8001e94 <HAL_RCC_ClockConfig+0x2e8>)
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	691b      	ldr	r3, [r3, #16]
 8001e46:	00db      	lsls	r3, r3, #3
 8001e48:	4912      	ldr	r1, [pc, #72]	; (8001e94 <HAL_RCC_ClockConfig+0x2e8>)
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001e4e:	f000 f829 	bl	8001ea4 <HAL_RCC_GetSysClockFreq>
 8001e52:	4601      	mov	r1, r0
 8001e54:	4b0f      	ldr	r3, [pc, #60]	; (8001e94 <HAL_RCC_ClockConfig+0x2e8>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e5c:	22f0      	movs	r2, #240	; 0xf0
 8001e5e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e60:	693a      	ldr	r2, [r7, #16]
 8001e62:	fa92 f2a2 	rbit	r2, r2
 8001e66:	60fa      	str	r2, [r7, #12]
  return result;
 8001e68:	68fa      	ldr	r2, [r7, #12]
 8001e6a:	fab2 f282 	clz	r2, r2
 8001e6e:	b2d2      	uxtb	r2, r2
 8001e70:	40d3      	lsrs	r3, r2
 8001e72:	4a09      	ldr	r2, [pc, #36]	; (8001e98 <HAL_RCC_ClockConfig+0x2ec>)
 8001e74:	5cd3      	ldrb	r3, [r2, r3]
 8001e76:	fa21 f303 	lsr.w	r3, r1, r3
 8001e7a:	4a08      	ldr	r2, [pc, #32]	; (8001e9c <HAL_RCC_ClockConfig+0x2f0>)
 8001e7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001e7e:	4b08      	ldr	r3, [pc, #32]	; (8001ea0 <HAL_RCC_ClockConfig+0x2f4>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7fe fbe8 	bl	8000658 <HAL_InitTick>
  
  return HAL_OK;
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3778      	adds	r7, #120	; 0x78
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	40021000 	.word	0x40021000
 8001e98:	0800399c 	.word	0x0800399c
 8001e9c:	20000010 	.word	0x20000010
 8001ea0:	20000014 	.word	0x20000014

08001ea4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b08b      	sub	sp, #44	; 0x2c
 8001ea8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	61fb      	str	r3, [r7, #28]
 8001eae:	2300      	movs	r3, #0
 8001eb0:	61bb      	str	r3, [r7, #24]
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	627b      	str	r3, [r7, #36]	; 0x24
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001ebe:	4b2a      	ldr	r3, [pc, #168]	; (8001f68 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	f003 030c 	and.w	r3, r3, #12
 8001eca:	2b04      	cmp	r3, #4
 8001ecc:	d002      	beq.n	8001ed4 <HAL_RCC_GetSysClockFreq+0x30>
 8001ece:	2b08      	cmp	r3, #8
 8001ed0:	d003      	beq.n	8001eda <HAL_RCC_GetSysClockFreq+0x36>
 8001ed2:	e03f      	b.n	8001f54 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ed4:	4b25      	ldr	r3, [pc, #148]	; (8001f6c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001ed6:	623b      	str	r3, [r7, #32]
      break;
 8001ed8:	e03f      	b.n	8001f5a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001ee0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001ee4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee6:	68ba      	ldr	r2, [r7, #8]
 8001ee8:	fa92 f2a2 	rbit	r2, r2
 8001eec:	607a      	str	r2, [r7, #4]
  return result;
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	fab2 f282 	clz	r2, r2
 8001ef4:	b2d2      	uxtb	r2, r2
 8001ef6:	40d3      	lsrs	r3, r2
 8001ef8:	4a1d      	ldr	r2, [pc, #116]	; (8001f70 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001efa:	5cd3      	ldrb	r3, [r2, r3]
 8001efc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001efe:	4b1a      	ldr	r3, [pc, #104]	; (8001f68 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f02:	f003 030f 	and.w	r3, r3, #15
 8001f06:	220f      	movs	r2, #15
 8001f08:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0a:	693a      	ldr	r2, [r7, #16]
 8001f0c:	fa92 f2a2 	rbit	r2, r2
 8001f10:	60fa      	str	r2, [r7, #12]
  return result;
 8001f12:	68fa      	ldr	r2, [r7, #12]
 8001f14:	fab2 f282 	clz	r2, r2
 8001f18:	b2d2      	uxtb	r2, r2
 8001f1a:	40d3      	lsrs	r3, r2
 8001f1c:	4a15      	ldr	r2, [pc, #84]	; (8001f74 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001f1e:	5cd3      	ldrb	r3, [r2, r3]
 8001f20:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d008      	beq.n	8001f3e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f2c:	4a0f      	ldr	r2, [pc, #60]	; (8001f6c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	fb02 f303 	mul.w	r3, r2, r3
 8001f3a:	627b      	str	r3, [r7, #36]	; 0x24
 8001f3c:	e007      	b.n	8001f4e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f3e:	4a0b      	ldr	r2, [pc, #44]	; (8001f6c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	fb02 f303 	mul.w	r3, r2, r3
 8001f4c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f50:	623b      	str	r3, [r7, #32]
      break;
 8001f52:	e002      	b.n	8001f5a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f54:	4b05      	ldr	r3, [pc, #20]	; (8001f6c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001f56:	623b      	str	r3, [r7, #32]
      break;
 8001f58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f5a:	6a3b      	ldr	r3, [r7, #32]
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	372c      	adds	r7, #44	; 0x2c
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	007a1200 	.word	0x007a1200
 8001f70:	080039b4 	.word	0x080039b4
 8001f74:	080039c4 	.word	0x080039c4

08001f78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f7c:	4b03      	ldr	r3, [pc, #12]	; (8001f8c <HAL_RCC_GetHCLKFreq+0x14>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	20000010 	.word	0x20000010

08001f90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001f96:	f7ff ffef 	bl	8001f78 <HAL_RCC_GetHCLKFreq>
 8001f9a:	4601      	mov	r1, r0
 8001f9c:	4b0b      	ldr	r3, [pc, #44]	; (8001fcc <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001fa4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001fa8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	fa92 f2a2 	rbit	r2, r2
 8001fb0:	603a      	str	r2, [r7, #0]
  return result;
 8001fb2:	683a      	ldr	r2, [r7, #0]
 8001fb4:	fab2 f282 	clz	r2, r2
 8001fb8:	b2d2      	uxtb	r2, r2
 8001fba:	40d3      	lsrs	r3, r2
 8001fbc:	4a04      	ldr	r2, [pc, #16]	; (8001fd0 <HAL_RCC_GetPCLK1Freq+0x40>)
 8001fbe:	5cd3      	ldrb	r3, [r2, r3]
 8001fc0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3708      	adds	r7, #8
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	080039ac 	.word	0x080039ac

08001fd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001fda:	f7ff ffcd 	bl	8001f78 <HAL_RCC_GetHCLKFreq>
 8001fde:	4601      	mov	r1, r0
 8001fe0:	4b0b      	ldr	r3, [pc, #44]	; (8002010 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001fe8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001fec:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	fa92 f2a2 	rbit	r2, r2
 8001ff4:	603a      	str	r2, [r7, #0]
  return result;
 8001ff6:	683a      	ldr	r2, [r7, #0]
 8001ff8:	fab2 f282 	clz	r2, r2
 8001ffc:	b2d2      	uxtb	r2, r2
 8001ffe:	40d3      	lsrs	r3, r2
 8002000:	4a04      	ldr	r2, [pc, #16]	; (8002014 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002002:	5cd3      	ldrb	r3, [r2, r3]
 8002004:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002008:	4618      	mov	r0, r3
 800200a:	3708      	adds	r7, #8
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	40021000 	.word	0x40021000
 8002014:	080039ac 	.word	0x080039ac

08002018 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b092      	sub	sp, #72	; 0x48
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002020:	2300      	movs	r3, #0
 8002022:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002024:	2300      	movs	r3, #0
 8002026:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002028:	2300      	movs	r3, #0
 800202a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002036:	2b00      	cmp	r3, #0
 8002038:	f000 80d4 	beq.w	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800203c:	4b4e      	ldr	r3, [pc, #312]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800203e:	69db      	ldr	r3, [r3, #28]
 8002040:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d10e      	bne.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002048:	4b4b      	ldr	r3, [pc, #300]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800204a:	69db      	ldr	r3, [r3, #28]
 800204c:	4a4a      	ldr	r2, [pc, #296]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800204e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002052:	61d3      	str	r3, [r2, #28]
 8002054:	4b48      	ldr	r3, [pc, #288]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002056:	69db      	ldr	r3, [r3, #28]
 8002058:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800205c:	60bb      	str	r3, [r7, #8]
 800205e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002060:	2301      	movs	r3, #1
 8002062:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002066:	4b45      	ldr	r3, [pc, #276]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800206e:	2b00      	cmp	r3, #0
 8002070:	d118      	bne.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002072:	4b42      	ldr	r3, [pc, #264]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a41      	ldr	r2, [pc, #260]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002078:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800207c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800207e:	f7fe fb2f 	bl	80006e0 <HAL_GetTick>
 8002082:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002084:	e008      	b.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002086:	f7fe fb2b 	bl	80006e0 <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	2b64      	cmp	r3, #100	; 0x64
 8002092:	d901      	bls.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e1d6      	b.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002098:	4b38      	ldr	r3, [pc, #224]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d0f0      	beq.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80020a4:	4b34      	ldr	r3, [pc, #208]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020a6:	6a1b      	ldr	r3, [r3, #32]
 80020a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020ac:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80020ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	f000 8084 	beq.w	80021be <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d07c      	beq.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80020c4:	4b2c      	ldr	r3, [pc, #176]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020c6:	6a1b      	ldr	r3, [r3, #32]
 80020c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020d2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020d6:	fa93 f3a3 	rbit	r3, r3
 80020da:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80020dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80020de:	fab3 f383 	clz	r3, r3
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	461a      	mov	r2, r3
 80020e6:	4b26      	ldr	r3, [pc, #152]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80020e8:	4413      	add	r3, r2
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	461a      	mov	r2, r3
 80020ee:	2301      	movs	r3, #1
 80020f0:	6013      	str	r3, [r2, #0]
 80020f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020f6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020fa:	fa93 f3a3 	rbit	r3, r3
 80020fe:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002102:	fab3 f383 	clz	r3, r3
 8002106:	b2db      	uxtb	r3, r3
 8002108:	461a      	mov	r2, r3
 800210a:	4b1d      	ldr	r3, [pc, #116]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800210c:	4413      	add	r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	461a      	mov	r2, r3
 8002112:	2300      	movs	r3, #0
 8002114:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002116:	4a18      	ldr	r2, [pc, #96]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002118:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800211a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800211c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	2b00      	cmp	r3, #0
 8002124:	d04b      	beq.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002126:	f7fe fadb 	bl	80006e0 <HAL_GetTick>
 800212a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800212c:	e00a      	b.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800212e:	f7fe fad7 	bl	80006e0 <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	f241 3288 	movw	r2, #5000	; 0x1388
 800213c:	4293      	cmp	r3, r2
 800213e:	d901      	bls.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e180      	b.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002144:	2302      	movs	r3, #2
 8002146:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800214a:	fa93 f3a3 	rbit	r3, r3
 800214e:	627b      	str	r3, [r7, #36]	; 0x24
 8002150:	2302      	movs	r3, #2
 8002152:	623b      	str	r3, [r7, #32]
 8002154:	6a3b      	ldr	r3, [r7, #32]
 8002156:	fa93 f3a3 	rbit	r3, r3
 800215a:	61fb      	str	r3, [r7, #28]
  return result;
 800215c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800215e:	fab3 f383 	clz	r3, r3
 8002162:	b2db      	uxtb	r3, r3
 8002164:	095b      	lsrs	r3, r3, #5
 8002166:	b2db      	uxtb	r3, r3
 8002168:	f043 0302 	orr.w	r3, r3, #2
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2b02      	cmp	r3, #2
 8002170:	d108      	bne.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002172:	4b01      	ldr	r3, [pc, #4]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002174:	6a1b      	ldr	r3, [r3, #32]
 8002176:	e00d      	b.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002178:	40021000 	.word	0x40021000
 800217c:	40007000 	.word	0x40007000
 8002180:	10908100 	.word	0x10908100
 8002184:	2302      	movs	r3, #2
 8002186:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	fa93 f3a3 	rbit	r3, r3
 800218e:	617b      	str	r3, [r7, #20]
 8002190:	4ba0      	ldr	r3, [pc, #640]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002194:	2202      	movs	r2, #2
 8002196:	613a      	str	r2, [r7, #16]
 8002198:	693a      	ldr	r2, [r7, #16]
 800219a:	fa92 f2a2 	rbit	r2, r2
 800219e:	60fa      	str	r2, [r7, #12]
  return result;
 80021a0:	68fa      	ldr	r2, [r7, #12]
 80021a2:	fab2 f282 	clz	r2, r2
 80021a6:	b2d2      	uxtb	r2, r2
 80021a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021ac:	b2d2      	uxtb	r2, r2
 80021ae:	f002 021f 	and.w	r2, r2, #31
 80021b2:	2101      	movs	r1, #1
 80021b4:	fa01 f202 	lsl.w	r2, r1, r2
 80021b8:	4013      	ands	r3, r2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d0b7      	beq.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80021be:	4b95      	ldr	r3, [pc, #596]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021c0:	6a1b      	ldr	r3, [r3, #32]
 80021c2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	4992      	ldr	r1, [pc, #584]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021cc:	4313      	orrs	r3, r2
 80021ce:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80021d0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d105      	bne.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021d8:	4b8e      	ldr	r3, [pc, #568]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021da:	69db      	ldr	r3, [r3, #28]
 80021dc:	4a8d      	ldr	r2, [pc, #564]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021e2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0301 	and.w	r3, r3, #1
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d008      	beq.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021f0:	4b88      	ldr	r3, [pc, #544]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f4:	f023 0203 	bic.w	r2, r3, #3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	4985      	ldr	r1, [pc, #532]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021fe:	4313      	orrs	r3, r2
 8002200:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	2b00      	cmp	r3, #0
 800220c:	d008      	beq.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800220e:	4b81      	ldr	r3, [pc, #516]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002212:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	497e      	ldr	r1, [pc, #504]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800221c:	4313      	orrs	r3, r2
 800221e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0304 	and.w	r3, r3, #4
 8002228:	2b00      	cmp	r3, #0
 800222a:	d008      	beq.n	800223e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800222c:	4b79      	ldr	r3, [pc, #484]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800222e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002230:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	691b      	ldr	r3, [r3, #16]
 8002238:	4976      	ldr	r1, [pc, #472]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800223a:	4313      	orrs	r3, r2
 800223c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0320 	and.w	r3, r3, #32
 8002246:	2b00      	cmp	r3, #0
 8002248:	d008      	beq.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800224a:	4b72      	ldr	r3, [pc, #456]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800224c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224e:	f023 0210 	bic.w	r2, r3, #16
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	69db      	ldr	r3, [r3, #28]
 8002256:	496f      	ldr	r1, [pc, #444]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002258:	4313      	orrs	r3, r2
 800225a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d008      	beq.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002268:	4b6a      	ldr	r3, [pc, #424]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002274:	4967      	ldr	r1, [pc, #412]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002276:	4313      	orrs	r3, r2
 8002278:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002282:	2b00      	cmp	r3, #0
 8002284:	d008      	beq.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002286:	4b63      	ldr	r3, [pc, #396]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228a:	f023 0220 	bic.w	r2, r3, #32
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6a1b      	ldr	r3, [r3, #32]
 8002292:	4960      	ldr	r1, [pc, #384]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002294:	4313      	orrs	r3, r2
 8002296:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d008      	beq.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022a4:	4b5b      	ldr	r3, [pc, #364]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b0:	4958      	ldr	r1, [pc, #352]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0308 	and.w	r3, r3, #8
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d008      	beq.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80022c2:	4b54      	ldr	r3, [pc, #336]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	695b      	ldr	r3, [r3, #20]
 80022ce:	4951      	ldr	r1, [pc, #324]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0310 	and.w	r3, r3, #16
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d008      	beq.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80022e0:	4b4c      	ldr	r3, [pc, #304]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	4949      	ldr	r1, [pc, #292]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d008      	beq.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80022fe:	4b45      	ldr	r3, [pc, #276]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230a:	4942      	ldr	r1, [pc, #264]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800230c:	4313      	orrs	r3, r2
 800230e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002318:	2b00      	cmp	r3, #0
 800231a:	d008      	beq.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800231c:	4b3d      	ldr	r3, [pc, #244]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800231e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002320:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002328:	493a      	ldr	r1, [pc, #232]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800232a:	4313      	orrs	r3, r2
 800232c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002336:	2b00      	cmp	r3, #0
 8002338:	d008      	beq.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800233a:	4b36      	ldr	r3, [pc, #216]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800233c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800233e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002346:	4933      	ldr	r1, [pc, #204]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002348:	4313      	orrs	r3, r2
 800234a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d008      	beq.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002358:	4b2e      	ldr	r3, [pc, #184]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800235a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002364:	492b      	ldr	r1, [pc, #172]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002366:	4313      	orrs	r3, r2
 8002368:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d008      	beq.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002376:	4b27      	ldr	r3, [pc, #156]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002382:	4924      	ldr	r1, [pc, #144]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002384:	4313      	orrs	r3, r2
 8002386:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d008      	beq.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002394:	4b1f      	ldr	r3, [pc, #124]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002398:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023a0:	491c      	ldr	r1, [pc, #112]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023a2:	4313      	orrs	r3, r2
 80023a4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d008      	beq.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80023b2:	4b18      	ldr	r3, [pc, #96]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023be:	4915      	ldr	r1, [pc, #84]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d008      	beq.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80023d0:	4b10      	ldr	r3, [pc, #64]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023dc:	490d      	ldr	r1, [pc, #52]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d008      	beq.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80023ee:	4b09      	ldr	r3, [pc, #36]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023fa:	4906      	ldr	r1, [pc, #24]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d00c      	beq.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800240c:	4b01      	ldr	r3, [pc, #4]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800240e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002410:	e002      	b.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8002412:	bf00      	nop
 8002414:	40021000 	.word	0x40021000
 8002418:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002420:	490b      	ldr	r1, [pc, #44]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002422:	4313      	orrs	r3, r2
 8002424:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d008      	beq.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002432:	4b07      	ldr	r3, [pc, #28]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002436:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800243e:	4904      	ldr	r1, [pc, #16]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002440:	4313      	orrs	r3, r2
 8002442:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	3748      	adds	r7, #72	; 0x48
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	40021000 	.word	0x40021000

08002454 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d101      	bne.n	8002466 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e040      	b.n	80024e8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800246a:	2b00      	cmp	r3, #0
 800246c:	d106      	bne.n	800247c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f7fe f81a 	bl	80004b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2224      	movs	r2, #36	; 0x24
 8002480:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f022 0201 	bic.w	r2, r2, #1
 8002490:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f000 fc0e 	bl	8002cb4 <UART_SetConfig>
 8002498:	4603      	mov	r3, r0
 800249a:	2b01      	cmp	r3, #1
 800249c:	d101      	bne.n	80024a2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e022      	b.n	80024e8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d002      	beq.n	80024b0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f000 fdd6 	bl	800305c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	685a      	ldr	r2, [r3, #4]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	689a      	ldr	r2, [r3, #8]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f042 0201 	orr.w	r2, r2, #1
 80024de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f000 fe5d 	bl	80031a0 <UART_CheckIdleState>
 80024e6:	4603      	mov	r3, r0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3708      	adds	r7, #8
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b08a      	sub	sp, #40	; 0x28
 80024f4:	af02      	add	r7, sp, #8
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	603b      	str	r3, [r7, #0]
 80024fc:	4613      	mov	r3, r2
 80024fe:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002504:	2b20      	cmp	r3, #32
 8002506:	f040 8082 	bne.w	800260e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d002      	beq.n	8002516 <HAL_UART_Transmit+0x26>
 8002510:	88fb      	ldrh	r3, [r7, #6]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d101      	bne.n	800251a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e07a      	b.n	8002610 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002520:	2b01      	cmp	r3, #1
 8002522:	d101      	bne.n	8002528 <HAL_UART_Transmit+0x38>
 8002524:	2302      	movs	r3, #2
 8002526:	e073      	b.n	8002610 <HAL_UART_Transmit+0x120>
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2200      	movs	r2, #0
 8002534:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2221      	movs	r2, #33	; 0x21
 800253c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800253e:	f7fe f8cf 	bl	80006e0 <HAL_GetTick>
 8002542:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	88fa      	ldrh	r2, [r7, #6]
 8002548:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	88fa      	ldrh	r2, [r7, #6]
 8002550:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800255c:	d108      	bne.n	8002570 <HAL_UART_Transmit+0x80>
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d104      	bne.n	8002570 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002566:	2300      	movs	r3, #0
 8002568:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	61bb      	str	r3, [r7, #24]
 800256e:	e003      	b.n	8002578 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002574:	2300      	movs	r3, #0
 8002576:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2200      	movs	r2, #0
 800257c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002580:	e02d      	b.n	80025de <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	9300      	str	r3, [sp, #0]
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	2200      	movs	r2, #0
 800258a:	2180      	movs	r1, #128	; 0x80
 800258c:	68f8      	ldr	r0, [r7, #12]
 800258e:	f000 fe50 	bl	8003232 <UART_WaitOnFlagUntilTimeout>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e039      	b.n	8002610 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d10b      	bne.n	80025ba <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	881a      	ldrh	r2, [r3, #0]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025ae:	b292      	uxth	r2, r2
 80025b0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	3302      	adds	r3, #2
 80025b6:	61bb      	str	r3, [r7, #24]
 80025b8:	e008      	b.n	80025cc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	781a      	ldrb	r2, [r3, #0]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	b292      	uxth	r2, r2
 80025c4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	3301      	adds	r3, #1
 80025ca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	3b01      	subs	r3, #1
 80025d6:	b29a      	uxth	r2, r3
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d1cb      	bne.n	8002582 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	9300      	str	r3, [sp, #0]
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	2200      	movs	r2, #0
 80025f2:	2140      	movs	r1, #64	; 0x40
 80025f4:	68f8      	ldr	r0, [r7, #12]
 80025f6:	f000 fe1c 	bl	8003232 <UART_WaitOnFlagUntilTimeout>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e005      	b.n	8002610 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2220      	movs	r2, #32
 8002608:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800260a:	2300      	movs	r3, #0
 800260c:	e000      	b.n	8002610 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800260e:	2302      	movs	r3, #2
  }
}
 8002610:	4618      	mov	r0, r3
 8002612:	3720      	adds	r7, #32
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b08a      	sub	sp, #40	; 0x28
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	4613      	mov	r3, r2
 8002624:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800262a:	2b20      	cmp	r3, #32
 800262c:	d13d      	bne.n	80026aa <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d002      	beq.n	800263a <HAL_UART_Receive_IT+0x22>
 8002634:	88fb      	ldrh	r3, [r7, #6]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d101      	bne.n	800263e <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e036      	b.n	80026ac <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002644:	2b01      	cmp	r3, #1
 8002646:	d101      	bne.n	800264c <HAL_UART_Receive_IT+0x34>
 8002648:	2302      	movs	r3, #2
 800264a:	e02f      	b.n	80026ac <HAL_UART_Receive_IT+0x94>
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2200      	movs	r2, #0
 8002658:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d018      	beq.n	800269a <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	e853 3f00 	ldrex	r3, [r3]
 8002674:	613b      	str	r3, [r7, #16]
   return(result);
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800267c:	627b      	str	r3, [r7, #36]	; 0x24
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	461a      	mov	r2, r3
 8002684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002686:	623b      	str	r3, [r7, #32]
 8002688:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800268a:	69f9      	ldr	r1, [r7, #28]
 800268c:	6a3a      	ldr	r2, [r7, #32]
 800268e:	e841 2300 	strex	r3, r2, [r1]
 8002692:	61bb      	str	r3, [r7, #24]
   return(result);
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d1e6      	bne.n	8002668 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800269a:	88fb      	ldrh	r3, [r7, #6]
 800269c:	461a      	mov	r2, r3
 800269e:	68b9      	ldr	r1, [r7, #8]
 80026a0:	68f8      	ldr	r0, [r7, #12]
 80026a2:	f000 fe8b 	bl	80033bc <UART_Start_Receive_IT>
 80026a6:	4603      	mov	r3, r0
 80026a8:	e000      	b.n	80026ac <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80026aa:	2302      	movs	r3, #2
  }
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3728      	adds	r7, #40	; 0x28
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b0ba      	sub	sp, #232	; 0xe8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	69db      	ldr	r3, [r3, #28]
 80026c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80026da:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80026de:	f640 030f 	movw	r3, #2063	; 0x80f
 80026e2:	4013      	ands	r3, r2
 80026e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80026e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d115      	bne.n	800271c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80026f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026f4:	f003 0320 	and.w	r3, r3, #32
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d00f      	beq.n	800271c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80026fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002700:	f003 0320 	and.w	r3, r3, #32
 8002704:	2b00      	cmp	r3, #0
 8002706:	d009      	beq.n	800271c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800270c:	2b00      	cmp	r3, #0
 800270e:	f000 82a4 	beq.w	8002c5a <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	4798      	blx	r3
      }
      return;
 800271a:	e29e      	b.n	8002c5a <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800271c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002720:	2b00      	cmp	r3, #0
 8002722:	f000 8117 	beq.w	8002954 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002726:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	2b00      	cmp	r3, #0
 8002730:	d106      	bne.n	8002740 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002732:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002736:	4b85      	ldr	r3, [pc, #532]	; (800294c <HAL_UART_IRQHandler+0x298>)
 8002738:	4013      	ands	r3, r2
 800273a:	2b00      	cmp	r3, #0
 800273c:	f000 810a 	beq.w	8002954 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002740:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002744:	f003 0301 	and.w	r3, r3, #1
 8002748:	2b00      	cmp	r3, #0
 800274a:	d011      	beq.n	8002770 <HAL_UART_IRQHandler+0xbc>
 800274c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002754:	2b00      	cmp	r3, #0
 8002756:	d00b      	beq.n	8002770 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2201      	movs	r2, #1
 800275e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002766:	f043 0201 	orr.w	r2, r3, #1
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002770:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002774:	f003 0302 	and.w	r3, r3, #2
 8002778:	2b00      	cmp	r3, #0
 800277a:	d011      	beq.n	80027a0 <HAL_UART_IRQHandler+0xec>
 800277c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002780:	f003 0301 	and.w	r3, r3, #1
 8002784:	2b00      	cmp	r3, #0
 8002786:	d00b      	beq.n	80027a0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2202      	movs	r2, #2
 800278e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002796:	f043 0204 	orr.w	r2, r3, #4
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80027a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027a4:	f003 0304 	and.w	r3, r3, #4
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d011      	beq.n	80027d0 <HAL_UART_IRQHandler+0x11c>
 80027ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80027b0:	f003 0301 	and.w	r3, r3, #1
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d00b      	beq.n	80027d0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2204      	movs	r2, #4
 80027be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027c6:	f043 0202 	orr.w	r2, r3, #2
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80027d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027d4:	f003 0308 	and.w	r3, r3, #8
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d017      	beq.n	800280c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80027dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027e0:	f003 0320 	and.w	r3, r3, #32
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d105      	bne.n	80027f4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80027e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80027ec:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d00b      	beq.n	800280c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2208      	movs	r2, #8
 80027fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002802:	f043 0208 	orr.w	r2, r3, #8
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800280c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002810:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002814:	2b00      	cmp	r3, #0
 8002816:	d012      	beq.n	800283e <HAL_UART_IRQHandler+0x18a>
 8002818:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800281c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d00c      	beq.n	800283e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800282c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002834:	f043 0220 	orr.w	r2, r3, #32
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002844:	2b00      	cmp	r3, #0
 8002846:	f000 820a 	beq.w	8002c5e <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800284a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800284e:	f003 0320 	and.w	r3, r3, #32
 8002852:	2b00      	cmp	r3, #0
 8002854:	d00d      	beq.n	8002872 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002856:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800285a:	f003 0320 	and.w	r3, r3, #32
 800285e:	2b00      	cmp	r3, #0
 8002860:	d007      	beq.n	8002872 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002866:	2b00      	cmp	r3, #0
 8002868:	d003      	beq.n	8002872 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002878:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002886:	2b40      	cmp	r3, #64	; 0x40
 8002888:	d005      	beq.n	8002896 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800288a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800288e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002892:	2b00      	cmp	r3, #0
 8002894:	d04f      	beq.n	8002936 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 fe3c 	bl	8003514 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028a6:	2b40      	cmp	r3, #64	; 0x40
 80028a8:	d141      	bne.n	800292e <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	3308      	adds	r3, #8
 80028b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80028b8:	e853 3f00 	ldrex	r3, [r3]
 80028bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80028c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80028c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	3308      	adds	r3, #8
 80028d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80028d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80028da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80028e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80028e6:	e841 2300 	strex	r3, r2, [r1]
 80028ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80028ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d1d9      	bne.n	80028aa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d013      	beq.n	8002926 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002902:	4a13      	ldr	r2, [pc, #76]	; (8002950 <HAL_UART_IRQHandler+0x29c>)
 8002904:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800290a:	4618      	mov	r0, r3
 800290c:	f7fe f83e 	bl	800098c <HAL_DMA_Abort_IT>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d017      	beq.n	8002946 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800291a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8002920:	4610      	mov	r0, r2
 8002922:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002924:	e00f      	b.n	8002946 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f000 f9ae 	bl	8002c88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800292c:	e00b      	b.n	8002946 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 f9aa 	bl	8002c88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002934:	e007      	b.n	8002946 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f000 f9a6 	bl	8002c88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8002944:	e18b      	b.n	8002c5e <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002946:	bf00      	nop
    return;
 8002948:	e189      	b.n	8002c5e <HAL_UART_IRQHandler+0x5aa>
 800294a:	bf00      	nop
 800294c:	04000120 	.word	0x04000120
 8002950:	080035db 	.word	0x080035db

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002958:	2b01      	cmp	r3, #1
 800295a:	f040 8143 	bne.w	8002be4 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800295e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002962:	f003 0310 	and.w	r3, r3, #16
 8002966:	2b00      	cmp	r3, #0
 8002968:	f000 813c 	beq.w	8002be4 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800296c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002970:	f003 0310 	and.w	r3, r3, #16
 8002974:	2b00      	cmp	r3, #0
 8002976:	f000 8135 	beq.w	8002be4 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2210      	movs	r2, #16
 8002980:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800298c:	2b40      	cmp	r3, #64	; 0x40
 800298e:	f040 80b1 	bne.w	8002af4 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800299e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	f000 815d 	beq.w	8002c62 <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80029ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80029b2:	429a      	cmp	r2, r3
 80029b4:	f080 8155 	bcs.w	8002c62 <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80029be:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c6:	699b      	ldr	r3, [r3, #24]
 80029c8:	2b20      	cmp	r3, #32
 80029ca:	f000 8085 	beq.w	8002ad8 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80029da:	e853 3f00 	ldrex	r3, [r3]
 80029de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80029e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80029e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029ea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	461a      	mov	r2, r3
 80029f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80029f8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80029fc:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a00:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002a04:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002a08:	e841 2300 	strex	r3, r2, [r1]
 8002a0c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002a10:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d1da      	bne.n	80029ce <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	3308      	adds	r3, #8
 8002a1e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a22:	e853 3f00 	ldrex	r3, [r3]
 8002a26:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002a28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a2a:	f023 0301 	bic.w	r3, r3, #1
 8002a2e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	3308      	adds	r3, #8
 8002a38:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002a3c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002a40:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a42:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002a44:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002a48:	e841 2300 	strex	r3, r2, [r1]
 8002a4c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002a4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d1e1      	bne.n	8002a18 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	3308      	adds	r3, #8
 8002a5a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a5e:	e853 3f00 	ldrex	r3, [r3]
 8002a62:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002a64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a6a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	3308      	adds	r3, #8
 8002a74:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002a78:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002a7a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a7c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002a7e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002a80:	e841 2300 	strex	r3, r2, [r1]
 8002a84:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002a86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d1e3      	bne.n	8002a54 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2220      	movs	r2, #32
 8002a90:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002aa0:	e853 3f00 	ldrex	r3, [r3]
 8002aa4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002aa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002aa8:	f023 0310 	bic.w	r3, r3, #16
 8002aac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002aba:	65bb      	str	r3, [r7, #88]	; 0x58
 8002abc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002abe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002ac0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002ac2:	e841 2300 	strex	r3, r2, [r1]
 8002ac6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002ac8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1e4      	bne.n	8002a98 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7fd ff21 	bl	800091a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	4619      	mov	r1, r3
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f000 f8d5 	bl	8002c9c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002af2:	e0b6      	b.n	8002c62 <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	f000 80a8 	beq.w	8002c66 <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8002b16:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	f000 80a3 	beq.w	8002c66 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b28:	e853 3f00 	ldrex	r3, [r3]
 8002b2c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002b34:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002b42:	647b      	str	r3, [r7, #68]	; 0x44
 8002b44:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b46:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002b48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b4a:	e841 2300 	strex	r3, r2, [r1]
 8002b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002b50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1e4      	bne.n	8002b20 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	3308      	adds	r3, #8
 8002b5c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b60:	e853 3f00 	ldrex	r3, [r3]
 8002b64:	623b      	str	r3, [r7, #32]
   return(result);
 8002b66:	6a3b      	ldr	r3, [r7, #32]
 8002b68:	f023 0301 	bic.w	r3, r3, #1
 8002b6c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	3308      	adds	r3, #8
 8002b76:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002b7a:	633a      	str	r2, [r7, #48]	; 0x30
 8002b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002b80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b82:	e841 2300 	strex	r3, r2, [r1]
 8002b86:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d1e3      	bne.n	8002b56 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2220      	movs	r2, #32
 8002b92:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	e853 3f00 	ldrex	r3, [r3]
 8002bac:	60fb      	str	r3, [r7, #12]
   return(result);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f023 0310 	bic.w	r3, r3, #16
 8002bb4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002bc2:	61fb      	str	r3, [r7, #28]
 8002bc4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bc6:	69b9      	ldr	r1, [r7, #24]
 8002bc8:	69fa      	ldr	r2, [r7, #28]
 8002bca:	e841 2300 	strex	r3, r2, [r1]
 8002bce:	617b      	str	r3, [r7, #20]
   return(result);
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d1e4      	bne.n	8002ba0 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002bd6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002bda:	4619      	mov	r1, r3
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f000 f85d 	bl	8002c9c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002be2:	e040      	b.n	8002c66 <HAL_UART_IRQHandler+0x5b2>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002be4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002be8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d00e      	beq.n	8002c0e <HAL_UART_IRQHandler+0x55a>
 8002bf0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002bf4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d008      	beq.n	8002c0e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002c04:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f000 fe83 	bl	8003912 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002c0c:	e02e      	b.n	8002c6c <HAL_UART_IRQHandler+0x5b8>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002c0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d00e      	beq.n	8002c38 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002c1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d008      	beq.n	8002c38 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d01d      	beq.n	8002c6a <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	4798      	blx	r3
    }
    return;
 8002c36:	e018      	b.n	8002c6a <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002c38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d013      	beq.n	8002c6c <HAL_UART_IRQHandler+0x5b8>
 8002c44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d00d      	beq.n	8002c6c <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f000 fcd8 	bl	8003606 <UART_EndTransmit_IT>
    return;
 8002c56:	bf00      	nop
 8002c58:	e008      	b.n	8002c6c <HAL_UART_IRQHandler+0x5b8>
      return;
 8002c5a:	bf00      	nop
 8002c5c:	e006      	b.n	8002c6c <HAL_UART_IRQHandler+0x5b8>
    return;
 8002c5e:	bf00      	nop
 8002c60:	e004      	b.n	8002c6c <HAL_UART_IRQHandler+0x5b8>
      return;
 8002c62:	bf00      	nop
 8002c64:	e002      	b.n	8002c6c <HAL_UART_IRQHandler+0x5b8>
      return;
 8002c66:	bf00      	nop
 8002c68:	e000      	b.n	8002c6c <HAL_UART_IRQHandler+0x5b8>
    return;
 8002c6a:	bf00      	nop
  }

}
 8002c6c:	37e8      	adds	r7, #232	; 0xe8
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop

08002c74 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002c7c:	bf00      	nop
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002c90:	bf00      	nop
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002ca8:	bf00      	nop
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b088      	sub	sp, #32
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	689a      	ldr	r2, [r3, #8]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	691b      	ldr	r3, [r3, #16]
 8002cc8:	431a      	orrs	r2, r3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	695b      	ldr	r3, [r3, #20]
 8002cce:	431a      	orrs	r2, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	69db      	ldr	r3, [r3, #28]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	4baa      	ldr	r3, [pc, #680]	; (8002f88 <UART_SetConfig+0x2d4>)
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	6812      	ldr	r2, [r2, #0]
 8002ce6:	6979      	ldr	r1, [r7, #20]
 8002ce8:	430b      	orrs	r3, r1
 8002cea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	68da      	ldr	r2, [r3, #12]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	699b      	ldr	r3, [r3, #24]
 8002d06:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a1b      	ldr	r3, [r3, #32]
 8002d0c:	697a      	ldr	r2, [r7, #20]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	697a      	ldr	r2, [r7, #20]
 8002d22:	430a      	orrs	r2, r1
 8002d24:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a98      	ldr	r2, [pc, #608]	; (8002f8c <UART_SetConfig+0x2d8>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d121      	bne.n	8002d74 <UART_SetConfig+0xc0>
 8002d30:	4b97      	ldr	r3, [pc, #604]	; (8002f90 <UART_SetConfig+0x2dc>)
 8002d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d34:	f003 0303 	and.w	r3, r3, #3
 8002d38:	2b03      	cmp	r3, #3
 8002d3a:	d817      	bhi.n	8002d6c <UART_SetConfig+0xb8>
 8002d3c:	a201      	add	r2, pc, #4	; (adr r2, 8002d44 <UART_SetConfig+0x90>)
 8002d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d42:	bf00      	nop
 8002d44:	08002d55 	.word	0x08002d55
 8002d48:	08002d61 	.word	0x08002d61
 8002d4c:	08002d67 	.word	0x08002d67
 8002d50:	08002d5b 	.word	0x08002d5b
 8002d54:	2301      	movs	r3, #1
 8002d56:	77fb      	strb	r3, [r7, #31]
 8002d58:	e0b2      	b.n	8002ec0 <UART_SetConfig+0x20c>
 8002d5a:	2302      	movs	r3, #2
 8002d5c:	77fb      	strb	r3, [r7, #31]
 8002d5e:	e0af      	b.n	8002ec0 <UART_SetConfig+0x20c>
 8002d60:	2304      	movs	r3, #4
 8002d62:	77fb      	strb	r3, [r7, #31]
 8002d64:	e0ac      	b.n	8002ec0 <UART_SetConfig+0x20c>
 8002d66:	2308      	movs	r3, #8
 8002d68:	77fb      	strb	r3, [r7, #31]
 8002d6a:	e0a9      	b.n	8002ec0 <UART_SetConfig+0x20c>
 8002d6c:	2310      	movs	r3, #16
 8002d6e:	77fb      	strb	r3, [r7, #31]
 8002d70:	bf00      	nop
 8002d72:	e0a5      	b.n	8002ec0 <UART_SetConfig+0x20c>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a86      	ldr	r2, [pc, #536]	; (8002f94 <UART_SetConfig+0x2e0>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d123      	bne.n	8002dc6 <UART_SetConfig+0x112>
 8002d7e:	4b84      	ldr	r3, [pc, #528]	; (8002f90 <UART_SetConfig+0x2dc>)
 8002d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d82:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d8a:	d012      	beq.n	8002db2 <UART_SetConfig+0xfe>
 8002d8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d90:	d802      	bhi.n	8002d98 <UART_SetConfig+0xe4>
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d007      	beq.n	8002da6 <UART_SetConfig+0xf2>
 8002d96:	e012      	b.n	8002dbe <UART_SetConfig+0x10a>
 8002d98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d9c:	d00c      	beq.n	8002db8 <UART_SetConfig+0x104>
 8002d9e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002da2:	d003      	beq.n	8002dac <UART_SetConfig+0xf8>
 8002da4:	e00b      	b.n	8002dbe <UART_SetConfig+0x10a>
 8002da6:	2300      	movs	r3, #0
 8002da8:	77fb      	strb	r3, [r7, #31]
 8002daa:	e089      	b.n	8002ec0 <UART_SetConfig+0x20c>
 8002dac:	2302      	movs	r3, #2
 8002dae:	77fb      	strb	r3, [r7, #31]
 8002db0:	e086      	b.n	8002ec0 <UART_SetConfig+0x20c>
 8002db2:	2304      	movs	r3, #4
 8002db4:	77fb      	strb	r3, [r7, #31]
 8002db6:	e083      	b.n	8002ec0 <UART_SetConfig+0x20c>
 8002db8:	2308      	movs	r3, #8
 8002dba:	77fb      	strb	r3, [r7, #31]
 8002dbc:	e080      	b.n	8002ec0 <UART_SetConfig+0x20c>
 8002dbe:	2310      	movs	r3, #16
 8002dc0:	77fb      	strb	r3, [r7, #31]
 8002dc2:	bf00      	nop
 8002dc4:	e07c      	b.n	8002ec0 <UART_SetConfig+0x20c>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a73      	ldr	r2, [pc, #460]	; (8002f98 <UART_SetConfig+0x2e4>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d123      	bne.n	8002e18 <UART_SetConfig+0x164>
 8002dd0:	4b6f      	ldr	r3, [pc, #444]	; (8002f90 <UART_SetConfig+0x2dc>)
 8002dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8002dd8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ddc:	d012      	beq.n	8002e04 <UART_SetConfig+0x150>
 8002dde:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002de2:	d802      	bhi.n	8002dea <UART_SetConfig+0x136>
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d007      	beq.n	8002df8 <UART_SetConfig+0x144>
 8002de8:	e012      	b.n	8002e10 <UART_SetConfig+0x15c>
 8002dea:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002dee:	d00c      	beq.n	8002e0a <UART_SetConfig+0x156>
 8002df0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002df4:	d003      	beq.n	8002dfe <UART_SetConfig+0x14a>
 8002df6:	e00b      	b.n	8002e10 <UART_SetConfig+0x15c>
 8002df8:	2300      	movs	r3, #0
 8002dfa:	77fb      	strb	r3, [r7, #31]
 8002dfc:	e060      	b.n	8002ec0 <UART_SetConfig+0x20c>
 8002dfe:	2302      	movs	r3, #2
 8002e00:	77fb      	strb	r3, [r7, #31]
 8002e02:	e05d      	b.n	8002ec0 <UART_SetConfig+0x20c>
 8002e04:	2304      	movs	r3, #4
 8002e06:	77fb      	strb	r3, [r7, #31]
 8002e08:	e05a      	b.n	8002ec0 <UART_SetConfig+0x20c>
 8002e0a:	2308      	movs	r3, #8
 8002e0c:	77fb      	strb	r3, [r7, #31]
 8002e0e:	e057      	b.n	8002ec0 <UART_SetConfig+0x20c>
 8002e10:	2310      	movs	r3, #16
 8002e12:	77fb      	strb	r3, [r7, #31]
 8002e14:	bf00      	nop
 8002e16:	e053      	b.n	8002ec0 <UART_SetConfig+0x20c>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a5f      	ldr	r2, [pc, #380]	; (8002f9c <UART_SetConfig+0x2e8>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d123      	bne.n	8002e6a <UART_SetConfig+0x1b6>
 8002e22:	4b5b      	ldr	r3, [pc, #364]	; (8002f90 <UART_SetConfig+0x2dc>)
 8002e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e26:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002e2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e2e:	d012      	beq.n	8002e56 <UART_SetConfig+0x1a2>
 8002e30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e34:	d802      	bhi.n	8002e3c <UART_SetConfig+0x188>
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d007      	beq.n	8002e4a <UART_SetConfig+0x196>
 8002e3a:	e012      	b.n	8002e62 <UART_SetConfig+0x1ae>
 8002e3c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e40:	d00c      	beq.n	8002e5c <UART_SetConfig+0x1a8>
 8002e42:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002e46:	d003      	beq.n	8002e50 <UART_SetConfig+0x19c>
 8002e48:	e00b      	b.n	8002e62 <UART_SetConfig+0x1ae>
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	77fb      	strb	r3, [r7, #31]
 8002e4e:	e037      	b.n	8002ec0 <UART_SetConfig+0x20c>
 8002e50:	2302      	movs	r3, #2
 8002e52:	77fb      	strb	r3, [r7, #31]
 8002e54:	e034      	b.n	8002ec0 <UART_SetConfig+0x20c>
 8002e56:	2304      	movs	r3, #4
 8002e58:	77fb      	strb	r3, [r7, #31]
 8002e5a:	e031      	b.n	8002ec0 <UART_SetConfig+0x20c>
 8002e5c:	2308      	movs	r3, #8
 8002e5e:	77fb      	strb	r3, [r7, #31]
 8002e60:	e02e      	b.n	8002ec0 <UART_SetConfig+0x20c>
 8002e62:	2310      	movs	r3, #16
 8002e64:	77fb      	strb	r3, [r7, #31]
 8002e66:	bf00      	nop
 8002e68:	e02a      	b.n	8002ec0 <UART_SetConfig+0x20c>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a4c      	ldr	r2, [pc, #304]	; (8002fa0 <UART_SetConfig+0x2ec>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d123      	bne.n	8002ebc <UART_SetConfig+0x208>
 8002e74:	4b46      	ldr	r3, [pc, #280]	; (8002f90 <UART_SetConfig+0x2dc>)
 8002e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e78:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8002e7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e80:	d012      	beq.n	8002ea8 <UART_SetConfig+0x1f4>
 8002e82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e86:	d802      	bhi.n	8002e8e <UART_SetConfig+0x1da>
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d007      	beq.n	8002e9c <UART_SetConfig+0x1e8>
 8002e8c:	e012      	b.n	8002eb4 <UART_SetConfig+0x200>
 8002e8e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e92:	d00c      	beq.n	8002eae <UART_SetConfig+0x1fa>
 8002e94:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e98:	d003      	beq.n	8002ea2 <UART_SetConfig+0x1ee>
 8002e9a:	e00b      	b.n	8002eb4 <UART_SetConfig+0x200>
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	77fb      	strb	r3, [r7, #31]
 8002ea0:	e00e      	b.n	8002ec0 <UART_SetConfig+0x20c>
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	77fb      	strb	r3, [r7, #31]
 8002ea6:	e00b      	b.n	8002ec0 <UART_SetConfig+0x20c>
 8002ea8:	2304      	movs	r3, #4
 8002eaa:	77fb      	strb	r3, [r7, #31]
 8002eac:	e008      	b.n	8002ec0 <UART_SetConfig+0x20c>
 8002eae:	2308      	movs	r3, #8
 8002eb0:	77fb      	strb	r3, [r7, #31]
 8002eb2:	e005      	b.n	8002ec0 <UART_SetConfig+0x20c>
 8002eb4:	2310      	movs	r3, #16
 8002eb6:	77fb      	strb	r3, [r7, #31]
 8002eb8:	bf00      	nop
 8002eba:	e001      	b.n	8002ec0 <UART_SetConfig+0x20c>
 8002ebc:	2310      	movs	r3, #16
 8002ebe:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	69db      	ldr	r3, [r3, #28]
 8002ec4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ec8:	d16e      	bne.n	8002fa8 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8002eca:	7ffb      	ldrb	r3, [r7, #31]
 8002ecc:	2b08      	cmp	r3, #8
 8002ece:	d828      	bhi.n	8002f22 <UART_SetConfig+0x26e>
 8002ed0:	a201      	add	r2, pc, #4	; (adr r2, 8002ed8 <UART_SetConfig+0x224>)
 8002ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ed6:	bf00      	nop
 8002ed8:	08002efd 	.word	0x08002efd
 8002edc:	08002f05 	.word	0x08002f05
 8002ee0:	08002f0d 	.word	0x08002f0d
 8002ee4:	08002f23 	.word	0x08002f23
 8002ee8:	08002f13 	.word	0x08002f13
 8002eec:	08002f23 	.word	0x08002f23
 8002ef0:	08002f23 	.word	0x08002f23
 8002ef4:	08002f23 	.word	0x08002f23
 8002ef8:	08002f1b 	.word	0x08002f1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002efc:	f7ff f848 	bl	8001f90 <HAL_RCC_GetPCLK1Freq>
 8002f00:	61b8      	str	r0, [r7, #24]
        break;
 8002f02:	e013      	b.n	8002f2c <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f04:	f7ff f866 	bl	8001fd4 <HAL_RCC_GetPCLK2Freq>
 8002f08:	61b8      	str	r0, [r7, #24]
        break;
 8002f0a:	e00f      	b.n	8002f2c <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f0c:	4b25      	ldr	r3, [pc, #148]	; (8002fa4 <UART_SetConfig+0x2f0>)
 8002f0e:	61bb      	str	r3, [r7, #24]
        break;
 8002f10:	e00c      	b.n	8002f2c <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f12:	f7fe ffc7 	bl	8001ea4 <HAL_RCC_GetSysClockFreq>
 8002f16:	61b8      	str	r0, [r7, #24]
        break;
 8002f18:	e008      	b.n	8002f2c <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f1e:	61bb      	str	r3, [r7, #24]
        break;
 8002f20:	e004      	b.n	8002f2c <UART_SetConfig+0x278>
      default:
        pclk = 0U;
 8002f22:	2300      	movs	r3, #0
 8002f24:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	77bb      	strb	r3, [r7, #30]
        break;
 8002f2a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	f000 8086 	beq.w	8003040 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	005a      	lsls	r2, r3, #1
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	085b      	lsrs	r3, r3, #1
 8002f3e:	441a      	add	r2, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	2b0f      	cmp	r3, #15
 8002f50:	d916      	bls.n	8002f80 <UART_SetConfig+0x2cc>
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f58:	d212      	bcs.n	8002f80 <UART_SetConfig+0x2cc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	f023 030f 	bic.w	r3, r3, #15
 8002f62:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	085b      	lsrs	r3, r3, #1
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	f003 0307 	and.w	r3, r3, #7
 8002f6e:	b29a      	uxth	r2, r3
 8002f70:	89fb      	ldrh	r3, [r7, #14]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	89fa      	ldrh	r2, [r7, #14]
 8002f7c:	60da      	str	r2, [r3, #12]
 8002f7e:	e05f      	b.n	8003040 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	77bb      	strb	r3, [r7, #30]
 8002f84:	e05c      	b.n	8003040 <UART_SetConfig+0x38c>
 8002f86:	bf00      	nop
 8002f88:	efff69f3 	.word	0xefff69f3
 8002f8c:	40013800 	.word	0x40013800
 8002f90:	40021000 	.word	0x40021000
 8002f94:	40004400 	.word	0x40004400
 8002f98:	40004800 	.word	0x40004800
 8002f9c:	40004c00 	.word	0x40004c00
 8002fa0:	40005000 	.word	0x40005000
 8002fa4:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8002fa8:	7ffb      	ldrb	r3, [r7, #31]
 8002faa:	2b08      	cmp	r3, #8
 8002fac:	d827      	bhi.n	8002ffe <UART_SetConfig+0x34a>
 8002fae:	a201      	add	r2, pc, #4	; (adr r2, 8002fb4 <UART_SetConfig+0x300>)
 8002fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fb4:	08002fd9 	.word	0x08002fd9
 8002fb8:	08002fe1 	.word	0x08002fe1
 8002fbc:	08002fe9 	.word	0x08002fe9
 8002fc0:	08002fff 	.word	0x08002fff
 8002fc4:	08002fef 	.word	0x08002fef
 8002fc8:	08002fff 	.word	0x08002fff
 8002fcc:	08002fff 	.word	0x08002fff
 8002fd0:	08002fff 	.word	0x08002fff
 8002fd4:	08002ff7 	.word	0x08002ff7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fd8:	f7fe ffda 	bl	8001f90 <HAL_RCC_GetPCLK1Freq>
 8002fdc:	61b8      	str	r0, [r7, #24]
        break;
 8002fde:	e013      	b.n	8003008 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002fe0:	f7fe fff8 	bl	8001fd4 <HAL_RCC_GetPCLK2Freq>
 8002fe4:	61b8      	str	r0, [r7, #24]
        break;
 8002fe6:	e00f      	b.n	8003008 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002fe8:	4b1b      	ldr	r3, [pc, #108]	; (8003058 <UART_SetConfig+0x3a4>)
 8002fea:	61bb      	str	r3, [r7, #24]
        break;
 8002fec:	e00c      	b.n	8003008 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fee:	f7fe ff59 	bl	8001ea4 <HAL_RCC_GetSysClockFreq>
 8002ff2:	61b8      	str	r0, [r7, #24]
        break;
 8002ff4:	e008      	b.n	8003008 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ff6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ffa:	61bb      	str	r3, [r7, #24]
        break;
 8002ffc:	e004      	b.n	8003008 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8002ffe:	2300      	movs	r3, #0
 8003000:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	77bb      	strb	r3, [r7, #30]
        break;
 8003006:	bf00      	nop
    }

    if (pclk != 0U)
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d018      	beq.n	8003040 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	085a      	lsrs	r2, r3, #1
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	441a      	add	r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003020:	b29b      	uxth	r3, r3
 8003022:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	2b0f      	cmp	r3, #15
 8003028:	d908      	bls.n	800303c <UART_SetConfig+0x388>
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003030:	d204      	bcs.n	800303c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = usartdiv;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	693a      	ldr	r2, [r7, #16]
 8003038:	60da      	str	r2, [r3, #12]
 800303a:	e001      	b.n	8003040 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800304c:	7fbb      	ldrb	r3, [r7, #30]
}
 800304e:	4618      	mov	r0, r3
 8003050:	3720      	adds	r7, #32
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	007a1200 	.word	0x007a1200

0800305c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003068:	f003 0301 	and.w	r3, r3, #1
 800306c:	2b00      	cmp	r3, #0
 800306e:	d00a      	beq.n	8003086 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	430a      	orrs	r2, r1
 8003084:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308a:	f003 0302 	and.w	r3, r3, #2
 800308e:	2b00      	cmp	r3, #0
 8003090:	d00a      	beq.n	80030a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	430a      	orrs	r2, r1
 80030a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ac:	f003 0304 	and.w	r3, r3, #4
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d00a      	beq.n	80030ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	430a      	orrs	r2, r1
 80030c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ce:	f003 0308 	and.w	r3, r3, #8
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00a      	beq.n	80030ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	430a      	orrs	r2, r1
 80030ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f0:	f003 0310 	and.w	r3, r3, #16
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d00a      	beq.n	800310e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	430a      	orrs	r2, r1
 800310c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003112:	f003 0320 	and.w	r3, r3, #32
 8003116:	2b00      	cmp	r3, #0
 8003118:	d00a      	beq.n	8003130 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	430a      	orrs	r2, r1
 800312e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003138:	2b00      	cmp	r3, #0
 800313a:	d01a      	beq.n	8003172 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	430a      	orrs	r2, r1
 8003150:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003156:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800315a:	d10a      	bne.n	8003172 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	430a      	orrs	r2, r1
 8003170:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003176:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00a      	beq.n	8003194 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	430a      	orrs	r2, r1
 8003192:	605a      	str	r2, [r3, #4]
  }
}
 8003194:	bf00      	nop
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b086      	sub	sp, #24
 80031a4:	af02      	add	r7, sp, #8
 80031a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80031b0:	f7fd fa96 	bl	80006e0 <HAL_GetTick>
 80031b4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0308 	and.w	r3, r3, #8
 80031c0:	2b08      	cmp	r3, #8
 80031c2:	d10e      	bne.n	80031e2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80031c8:	9300      	str	r3, [sp, #0]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f000 f82d 	bl	8003232 <UART_WaitOnFlagUntilTimeout>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d001      	beq.n	80031e2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e023      	b.n	800322a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0304 	and.w	r3, r3, #4
 80031ec:	2b04      	cmp	r3, #4
 80031ee:	d10e      	bne.n	800320e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80031f4:	9300      	str	r3, [sp, #0]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f000 f817 	bl	8003232 <UART_WaitOnFlagUntilTimeout>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d001      	beq.n	800320e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e00d      	b.n	800322a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2220      	movs	r2, #32
 8003212:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2220      	movs	r2, #32
 8003218:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3710      	adds	r7, #16
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003232:	b580      	push	{r7, lr}
 8003234:	b09c      	sub	sp, #112	; 0x70
 8003236:	af00      	add	r7, sp, #0
 8003238:	60f8      	str	r0, [r7, #12]
 800323a:	60b9      	str	r1, [r7, #8]
 800323c:	603b      	str	r3, [r7, #0]
 800323e:	4613      	mov	r3, r2
 8003240:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003242:	e0a5      	b.n	8003390 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003244:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800324a:	f000 80a1 	beq.w	8003390 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800324e:	f7fd fa47 	bl	80006e0 <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800325a:	429a      	cmp	r2, r3
 800325c:	d302      	bcc.n	8003264 <UART_WaitOnFlagUntilTimeout+0x32>
 800325e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003260:	2b00      	cmp	r3, #0
 8003262:	d13e      	bne.n	80032e2 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800326a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800326c:	e853 3f00 	ldrex	r3, [r3]
 8003270:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003272:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003274:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003278:	667b      	str	r3, [r7, #100]	; 0x64
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	461a      	mov	r2, r3
 8003280:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003282:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003284:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003286:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003288:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800328a:	e841 2300 	strex	r3, r2, [r1]
 800328e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003290:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003292:	2b00      	cmp	r3, #0
 8003294:	d1e6      	bne.n	8003264 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	3308      	adds	r3, #8
 800329c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800329e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032a0:	e853 3f00 	ldrex	r3, [r3]
 80032a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80032a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032a8:	f023 0301 	bic.w	r3, r3, #1
 80032ac:	663b      	str	r3, [r7, #96]	; 0x60
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	3308      	adds	r3, #8
 80032b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80032b6:	64ba      	str	r2, [r7, #72]	; 0x48
 80032b8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80032bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032be:	e841 2300 	strex	r3, r2, [r1]
 80032c2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80032c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d1e5      	bne.n	8003296 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2220      	movs	r2, #32
 80032ce:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2220      	movs	r2, #32
 80032d4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e067      	b.n	80033b2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0304 	and.w	r3, r3, #4
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d04f      	beq.n	8003390 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	69db      	ldr	r3, [r3, #28]
 80032f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032fe:	d147      	bne.n	8003390 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003308:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003312:	e853 3f00 	ldrex	r3, [r3]
 8003316:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800331e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	461a      	mov	r2, r3
 8003326:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003328:	637b      	str	r3, [r7, #52]	; 0x34
 800332a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800332c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800332e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003330:	e841 2300 	strex	r3, r2, [r1]
 8003334:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003338:	2b00      	cmp	r3, #0
 800333a:	d1e6      	bne.n	800330a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	3308      	adds	r3, #8
 8003342:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	e853 3f00 	ldrex	r3, [r3]
 800334a:	613b      	str	r3, [r7, #16]
   return(result);
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	f023 0301 	bic.w	r3, r3, #1
 8003352:	66bb      	str	r3, [r7, #104]	; 0x68
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	3308      	adds	r3, #8
 800335a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800335c:	623a      	str	r2, [r7, #32]
 800335e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003360:	69f9      	ldr	r1, [r7, #28]
 8003362:	6a3a      	ldr	r2, [r7, #32]
 8003364:	e841 2300 	strex	r3, r2, [r1]
 8003368:	61bb      	str	r3, [r7, #24]
   return(result);
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d1e5      	bne.n	800333c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2220      	movs	r2, #32
 8003374:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2220      	movs	r2, #32
 800337a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2220      	movs	r2, #32
 8003380:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e010      	b.n	80033b2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	69da      	ldr	r2, [r3, #28]
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	4013      	ands	r3, r2
 800339a:	68ba      	ldr	r2, [r7, #8]
 800339c:	429a      	cmp	r2, r3
 800339e:	bf0c      	ite	eq
 80033a0:	2301      	moveq	r3, #1
 80033a2:	2300      	movne	r3, #0
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	461a      	mov	r2, r3
 80033a8:	79fb      	ldrb	r3, [r7, #7]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	f43f af4a 	beq.w	8003244 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3770      	adds	r7, #112	; 0x70
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
	...

080033bc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80033bc:	b480      	push	{r7}
 80033be:	b091      	sub	sp, #68	; 0x44
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	4613      	mov	r3, r2
 80033c8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	68ba      	ldr	r2, [r7, #8]
 80033ce:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	88fa      	ldrh	r2, [r7, #6]
 80033d4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	88fa      	ldrh	r2, [r7, #6]
 80033dc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2200      	movs	r2, #0
 80033e4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033ee:	d10e      	bne.n	800340e <UART_Start_Receive_IT+0x52>
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	691b      	ldr	r3, [r3, #16]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d105      	bne.n	8003404 <UART_Start_Receive_IT+0x48>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f240 12ff 	movw	r2, #511	; 0x1ff
 80033fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003402:	e02d      	b.n	8003460 <UART_Start_Receive_IT+0xa4>
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	22ff      	movs	r2, #255	; 0xff
 8003408:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800340c:	e028      	b.n	8003460 <UART_Start_Receive_IT+0xa4>
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d10d      	bne.n	8003432 <UART_Start_Receive_IT+0x76>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d104      	bne.n	8003428 <UART_Start_Receive_IT+0x6c>
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	22ff      	movs	r2, #255	; 0xff
 8003422:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003426:	e01b      	b.n	8003460 <UART_Start_Receive_IT+0xa4>
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	227f      	movs	r2, #127	; 0x7f
 800342c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003430:	e016      	b.n	8003460 <UART_Start_Receive_IT+0xa4>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800343a:	d10d      	bne.n	8003458 <UART_Start_Receive_IT+0x9c>
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	691b      	ldr	r3, [r3, #16]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d104      	bne.n	800344e <UART_Start_Receive_IT+0x92>
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	227f      	movs	r2, #127	; 0x7f
 8003448:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800344c:	e008      	b.n	8003460 <UART_Start_Receive_IT+0xa4>
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	223f      	movs	r2, #63	; 0x3f
 8003452:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003456:	e003      	b.n	8003460 <UART_Start_Receive_IT+0xa4>
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2200      	movs	r2, #0
 800345c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2200      	movs	r2, #0
 8003464:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2222      	movs	r2, #34	; 0x22
 800346c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	3308      	adds	r3, #8
 8003474:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003478:	e853 3f00 	ldrex	r3, [r3]
 800347c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800347e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003480:	f043 0301 	orr.w	r3, r3, #1
 8003484:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	3308      	adds	r3, #8
 800348c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800348e:	637a      	str	r2, [r7, #52]	; 0x34
 8003490:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003492:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003494:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003496:	e841 2300 	strex	r3, r2, [r1]
 800349a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800349c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1e5      	bne.n	800346e <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034aa:	d107      	bne.n	80034bc <UART_Start_Receive_IT+0x100>
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	691b      	ldr	r3, [r3, #16]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d103      	bne.n	80034bc <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	4a15      	ldr	r2, [pc, #84]	; (800350c <UART_Start_Receive_IT+0x150>)
 80034b8:	665a      	str	r2, [r3, #100]	; 0x64
 80034ba:	e002      	b.n	80034c2 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	4a14      	ldr	r2, [pc, #80]	; (8003510 <UART_Start_Receive_IT+0x154>)
 80034c0:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	e853 3f00 	ldrex	r3, [r3]
 80034d6:	613b      	str	r3, [r7, #16]
   return(result);
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80034de:	63bb      	str	r3, [r7, #56]	; 0x38
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	461a      	mov	r2, r3
 80034e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034e8:	623b      	str	r3, [r7, #32]
 80034ea:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ec:	69f9      	ldr	r1, [r7, #28]
 80034ee:	6a3a      	ldr	r2, [r7, #32]
 80034f0:	e841 2300 	strex	r3, r2, [r1]
 80034f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d1e6      	bne.n	80034ca <UART_Start_Receive_IT+0x10e>
  return HAL_OK;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3744      	adds	r7, #68	; 0x44
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	080037b7 	.word	0x080037b7
 8003510:	0800365b 	.word	0x0800365b

08003514 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003514:	b480      	push	{r7}
 8003516:	b095      	sub	sp, #84	; 0x54
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003524:	e853 3f00 	ldrex	r3, [r3]
 8003528:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800352a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800352c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003530:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	461a      	mov	r2, r3
 8003538:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800353a:	643b      	str	r3, [r7, #64]	; 0x40
 800353c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800353e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003540:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003542:	e841 2300 	strex	r3, r2, [r1]
 8003546:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800354a:	2b00      	cmp	r3, #0
 800354c:	d1e6      	bne.n	800351c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	3308      	adds	r3, #8
 8003554:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003556:	6a3b      	ldr	r3, [r7, #32]
 8003558:	e853 3f00 	ldrex	r3, [r3]
 800355c:	61fb      	str	r3, [r7, #28]
   return(result);
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	f023 0301 	bic.w	r3, r3, #1
 8003564:	64bb      	str	r3, [r7, #72]	; 0x48
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	3308      	adds	r3, #8
 800356c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800356e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003570:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003572:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003574:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003576:	e841 2300 	strex	r3, r2, [r1]
 800357a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800357c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357e:	2b00      	cmp	r3, #0
 8003580:	d1e5      	bne.n	800354e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003586:	2b01      	cmp	r3, #1
 8003588:	d118      	bne.n	80035bc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	e853 3f00 	ldrex	r3, [r3]
 8003596:	60bb      	str	r3, [r7, #8]
   return(result);
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	f023 0310 	bic.w	r3, r3, #16
 800359e:	647b      	str	r3, [r7, #68]	; 0x44
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	461a      	mov	r2, r3
 80035a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035a8:	61bb      	str	r3, [r7, #24]
 80035aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ac:	6979      	ldr	r1, [r7, #20]
 80035ae:	69ba      	ldr	r2, [r7, #24]
 80035b0:	e841 2300 	strex	r3, r2, [r1]
 80035b4:	613b      	str	r3, [r7, #16]
   return(result);
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d1e6      	bne.n	800358a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2220      	movs	r2, #32
 80035c0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	665a      	str	r2, [r3, #100]	; 0x64
}
 80035ce:	bf00      	nop
 80035d0:	3754      	adds	r7, #84	; 0x54
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr

080035da <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80035da:	b580      	push	{r7, lr}
 80035dc:	b084      	sub	sp, #16
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80035f8:	68f8      	ldr	r0, [r7, #12]
 80035fa:	f7ff fb45 	bl	8002c88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80035fe:	bf00      	nop
 8003600:	3710      	adds	r7, #16
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}

08003606 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003606:	b580      	push	{r7, lr}
 8003608:	b088      	sub	sp, #32
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	e853 3f00 	ldrex	r3, [r3]
 800361a:	60bb      	str	r3, [r7, #8]
   return(result);
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003622:	61fb      	str	r3, [r7, #28]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	461a      	mov	r2, r3
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	61bb      	str	r3, [r7, #24]
 800362e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003630:	6979      	ldr	r1, [r7, #20]
 8003632:	69ba      	ldr	r2, [r7, #24]
 8003634:	e841 2300 	strex	r3, r2, [r1]
 8003638:	613b      	str	r3, [r7, #16]
   return(result);
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d1e6      	bne.n	800360e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2220      	movs	r2, #32
 8003644:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f7ff fb11 	bl	8002c74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003652:	bf00      	nop
 8003654:	3720      	adds	r7, #32
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}

0800365a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800365a:	b580      	push	{r7, lr}
 800365c:	b096      	sub	sp, #88	; 0x58
 800365e:	af00      	add	r7, sp, #0
 8003660:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003668:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003670:	2b22      	cmp	r3, #34	; 0x22
 8003672:	f040 8094 	bne.w	800379e <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800367c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003680:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003684:	b2d9      	uxtb	r1, r3
 8003686:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800368a:	b2da      	uxtb	r2, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003690:	400a      	ands	r2, r1
 8003692:	b2d2      	uxtb	r2, r2
 8003694:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800369a:	1c5a      	adds	r2, r3, #1
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	3b01      	subs	r3, #1
 80036aa:	b29a      	uxth	r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d177      	bne.n	80037ae <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036c6:	e853 3f00 	ldrex	r3, [r3]
 80036ca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80036cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80036d2:	653b      	str	r3, [r7, #80]	; 0x50
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	461a      	mov	r2, r3
 80036da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036dc:	647b      	str	r3, [r7, #68]	; 0x44
 80036de:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80036e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80036e4:	e841 2300 	strex	r3, r2, [r1]
 80036e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80036ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d1e6      	bne.n	80036be <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	3308      	adds	r3, #8
 80036f6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fa:	e853 3f00 	ldrex	r3, [r3]
 80036fe:	623b      	str	r3, [r7, #32]
   return(result);
 8003700:	6a3b      	ldr	r3, [r7, #32]
 8003702:	f023 0301 	bic.w	r3, r3, #1
 8003706:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	3308      	adds	r3, #8
 800370e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003710:	633a      	str	r2, [r7, #48]	; 0x30
 8003712:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003714:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003716:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003718:	e841 2300 	strex	r3, r2, [r1]
 800371c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800371e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003720:	2b00      	cmp	r3, #0
 8003722:	d1e5      	bne.n	80036f0 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2220      	movs	r2, #32
 8003728:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003734:	2b01      	cmp	r3, #1
 8003736:	d12e      	bne.n	8003796 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	e853 3f00 	ldrex	r3, [r3]
 800374a:	60fb      	str	r3, [r7, #12]
   return(result);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f023 0310 	bic.w	r3, r3, #16
 8003752:	64bb      	str	r3, [r7, #72]	; 0x48
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	461a      	mov	r2, r3
 800375a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800375c:	61fb      	str	r3, [r7, #28]
 800375e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003760:	69b9      	ldr	r1, [r7, #24]
 8003762:	69fa      	ldr	r2, [r7, #28]
 8003764:	e841 2300 	strex	r3, r2, [r1]
 8003768:	617b      	str	r3, [r7, #20]
   return(result);
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d1e6      	bne.n	800373e <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	69db      	ldr	r3, [r3, #28]
 8003776:	f003 0310 	and.w	r3, r3, #16
 800377a:	2b10      	cmp	r3, #16
 800377c:	d103      	bne.n	8003786 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2210      	movs	r2, #16
 8003784:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800378c:	4619      	mov	r1, r3
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f7ff fa84 	bl	8002c9c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003794:	e00b      	b.n	80037ae <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f7fc fd1c 	bl	80001d4 <HAL_UART_RxCpltCallback>
}
 800379c:	e007      	b.n	80037ae <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	699a      	ldr	r2, [r3, #24]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f042 0208 	orr.w	r2, r2, #8
 80037ac:	619a      	str	r2, [r3, #24]
}
 80037ae:	bf00      	nop
 80037b0:	3758      	adds	r7, #88	; 0x58
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}

080037b6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80037b6:	b580      	push	{r7, lr}
 80037b8:	b096      	sub	sp, #88	; 0x58
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80037c4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037cc:	2b22      	cmp	r3, #34	; 0x22
 80037ce:	f040 8094 	bne.w	80038fa <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80037d8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037e0:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80037e2:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80037e6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80037ea:	4013      	ands	r3, r2
 80037ec:	b29a      	uxth	r2, r3
 80037ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037f0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037f6:	1c9a      	adds	r2, r3, #2
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003802:	b29b      	uxth	r3, r3
 8003804:	3b01      	subs	r3, #1
 8003806:	b29a      	uxth	r2, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003814:	b29b      	uxth	r3, r3
 8003816:	2b00      	cmp	r3, #0
 8003818:	d177      	bne.n	800390a <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003822:	e853 3f00 	ldrex	r3, [r3]
 8003826:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800382a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800382e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	461a      	mov	r2, r3
 8003836:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003838:	643b      	str	r3, [r7, #64]	; 0x40
 800383a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800383c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800383e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003840:	e841 2300 	strex	r3, r2, [r1]
 8003844:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003848:	2b00      	cmp	r3, #0
 800384a:	d1e6      	bne.n	800381a <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	3308      	adds	r3, #8
 8003852:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003854:	6a3b      	ldr	r3, [r7, #32]
 8003856:	e853 3f00 	ldrex	r3, [r3]
 800385a:	61fb      	str	r3, [r7, #28]
   return(result);
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	f023 0301 	bic.w	r3, r3, #1
 8003862:	64bb      	str	r3, [r7, #72]	; 0x48
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	3308      	adds	r3, #8
 800386a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800386c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800386e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003870:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003872:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003874:	e841 2300 	strex	r3, r2, [r1]
 8003878:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800387a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387c:	2b00      	cmp	r3, #0
 800387e:	d1e5      	bne.n	800384c <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2220      	movs	r2, #32
 8003884:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003890:	2b01      	cmp	r3, #1
 8003892:	d12e      	bne.n	80038f2 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	e853 3f00 	ldrex	r3, [r3]
 80038a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	f023 0310 	bic.w	r3, r3, #16
 80038ae:	647b      	str	r3, [r7, #68]	; 0x44
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	461a      	mov	r2, r3
 80038b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038b8:	61bb      	str	r3, [r7, #24]
 80038ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038bc:	6979      	ldr	r1, [r7, #20]
 80038be:	69ba      	ldr	r2, [r7, #24]
 80038c0:	e841 2300 	strex	r3, r2, [r1]
 80038c4:	613b      	str	r3, [r7, #16]
   return(result);
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d1e6      	bne.n	800389a <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	69db      	ldr	r3, [r3, #28]
 80038d2:	f003 0310 	and.w	r3, r3, #16
 80038d6:	2b10      	cmp	r3, #16
 80038d8:	d103      	bne.n	80038e2 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2210      	movs	r2, #16
 80038e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80038e8:	4619      	mov	r1, r3
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f7ff f9d6 	bl	8002c9c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80038f0:	e00b      	b.n	800390a <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f7fc fc6e 	bl	80001d4 <HAL_UART_RxCpltCallback>
}
 80038f8:	e007      	b.n	800390a <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	699a      	ldr	r2, [r3, #24]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f042 0208 	orr.w	r2, r2, #8
 8003908:	619a      	str	r2, [r3, #24]
}
 800390a:	bf00      	nop
 800390c:	3758      	adds	r7, #88	; 0x58
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003912:	b480      	push	{r7}
 8003914:	b083      	sub	sp, #12
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800391a:	bf00      	nop
 800391c:	370c      	adds	r7, #12
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr
	...

08003928 <__libc_init_array>:
 8003928:	b570      	push	{r4, r5, r6, lr}
 800392a:	4e0d      	ldr	r6, [pc, #52]	; (8003960 <__libc_init_array+0x38>)
 800392c:	4c0d      	ldr	r4, [pc, #52]	; (8003964 <__libc_init_array+0x3c>)
 800392e:	1ba4      	subs	r4, r4, r6
 8003930:	10a4      	asrs	r4, r4, #2
 8003932:	2500      	movs	r5, #0
 8003934:	42a5      	cmp	r5, r4
 8003936:	d109      	bne.n	800394c <__libc_init_array+0x24>
 8003938:	4e0b      	ldr	r6, [pc, #44]	; (8003968 <__libc_init_array+0x40>)
 800393a:	4c0c      	ldr	r4, [pc, #48]	; (800396c <__libc_init_array+0x44>)
 800393c:	f000 f820 	bl	8003980 <_init>
 8003940:	1ba4      	subs	r4, r4, r6
 8003942:	10a4      	asrs	r4, r4, #2
 8003944:	2500      	movs	r5, #0
 8003946:	42a5      	cmp	r5, r4
 8003948:	d105      	bne.n	8003956 <__libc_init_array+0x2e>
 800394a:	bd70      	pop	{r4, r5, r6, pc}
 800394c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003950:	4798      	blx	r3
 8003952:	3501      	adds	r5, #1
 8003954:	e7ee      	b.n	8003934 <__libc_init_array+0xc>
 8003956:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800395a:	4798      	blx	r3
 800395c:	3501      	adds	r5, #1
 800395e:	e7f2      	b.n	8003946 <__libc_init_array+0x1e>
 8003960:	080039d4 	.word	0x080039d4
 8003964:	080039d4 	.word	0x080039d4
 8003968:	080039d4 	.word	0x080039d4
 800396c:	080039d8 	.word	0x080039d8

08003970 <memset>:
 8003970:	4402      	add	r2, r0
 8003972:	4603      	mov	r3, r0
 8003974:	4293      	cmp	r3, r2
 8003976:	d100      	bne.n	800397a <memset+0xa>
 8003978:	4770      	bx	lr
 800397a:	f803 1b01 	strb.w	r1, [r3], #1
 800397e:	e7f9      	b.n	8003974 <memset+0x4>

08003980 <_init>:
 8003980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003982:	bf00      	nop
 8003984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003986:	bc08      	pop	{r3}
 8003988:	469e      	mov	lr, r3
 800398a:	4770      	bx	lr

0800398c <_fini>:
 800398c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800398e:	bf00      	nop
 8003990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003992:	bc08      	pop	{r3}
 8003994:	469e      	mov	lr, r3
 8003996:	4770      	bx	lr
